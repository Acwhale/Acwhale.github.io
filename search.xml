<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>PHP获取汉字的首字母</title>
      <link href="/2019/03/20/php/"/>
      <url>/2019/03/20/php/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 获取单个汉字拼音首字母。</span><br><span class="line"> */</span><br><span class="line">function getFirstChar($character)&#123;</span><br><span class="line">    $fchar = ord($character&#123;0&#125;);</span><br><span class="line">    if($fchar &gt;= ord(&quot;A&quot;) and $fchar &lt;= ord(&quot;z&quot;) ) &#123;</span><br><span class="line">        return strtoupper($character&#123;0&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    $s1 = iconv(&quot;UTF-8&quot;,&quot;gb2312&quot;,$character);</span><br><span class="line">    $s2 = iconv(&quot;gb2312&quot;,&quot;UTF-8&quot;,$s1);</span><br><span class="line">    if($s2==$character)&#123;</span><br><span class="line">        $s=$s1;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        $s=$character;</span><br><span class="line">    &#125;</span><br><span class="line">    $asc = ord($s&#123;0&#125;) * 256 + ord($s&#123;1&#125;) - 65536;</span><br><span class="line">    if($asc &gt;= -20319 &amp;&amp; $asc &lt;= -20284) return &quot;A&quot;;</span><br><span class="line">    if($asc &gt;= -20283 &amp;&amp; $asc &lt;= -19776) return &quot;B&quot;;</span><br><span class="line">    if($asc &gt;= -19775 &amp;&amp; $asc &lt;= -19219) return &quot;C&quot;;</span><br><span class="line">    if($asc &gt;= -19218 &amp;&amp; $asc &lt;= -18711) return &quot;D&quot;;</span><br><span class="line">    if($asc &gt;= -18710 &amp;&amp; $asc &lt;= -18527) return &quot;E&quot;;</span><br><span class="line">    if($asc &gt;= -18526 &amp;&amp; $asc &lt;= -18240) return &quot;F&quot;;</span><br><span class="line">    if($asc &gt;= -18239 &amp;&amp; $asc &lt;= -17923) return &quot;G&quot;;</span><br><span class="line">    if($asc &gt;= -17922 &amp;&amp; $asc &lt;= -17418) return &quot;H&quot;;</span><br><span class="line">    if($asc &gt;= -17922 &amp;&amp; $asc &lt;= -17418) return &quot;I&quot;;</span><br><span class="line">    if($asc &gt;= -17417 &amp;&amp; $asc &lt;= -16475) return &quot;J&quot;;</span><br><span class="line">    if($asc &gt;= -16474 &amp;&amp; $asc &lt;= -16213) return &quot;K&quot;;</span><br><span class="line">    if($asc &gt;= -16212 &amp;&amp; $asc &lt;= -15641) return &quot;L&quot;;</span><br><span class="line">    if($asc &gt;= -15640 &amp;&amp; $asc &lt;= -15166) return &quot;M&quot;;</span><br><span class="line">    if($asc &gt;= -15165 &amp;&amp; $asc &lt;= -14923) return &quot;N&quot;;</span><br><span class="line">    if($asc &gt;= -14922 &amp;&amp; $asc &lt;= -14915) return &quot;O&quot;;</span><br><span class="line">    if($asc &gt;= -14914 &amp;&amp; $asc &lt;= -14631) return &quot;P&quot;;</span><br><span class="line">    if($asc &gt;= -14630 &amp;&amp; $asc &lt;= -14150) return &quot;Q&quot;;</span><br><span class="line">    if($asc &gt;= -14149 &amp;&amp; $asc &lt;= -14091) return &quot;R&quot;;</span><br><span class="line">    if($asc &gt;= -14090 &amp;&amp; $asc &lt;= -13319) return &quot;S&quot;;</span><br><span class="line">    if($asc &gt;= -13318 &amp;&amp; $asc &lt;= -12839) return &quot;T&quot;;</span><br><span class="line">    if($asc &gt;= -12838 &amp;&amp; $asc &lt;= -12557) return &quot;W&quot;;</span><br><span class="line">    if($asc &gt;= -12556 &amp;&amp; $asc &lt;= -11848) return &quot;X&quot;;</span><br><span class="line">    if($asc &gt;= -11847 &amp;&amp; $asc &lt;= -11056) return &quot;Y&quot;;</span><br><span class="line">    if($asc &gt;= -11055 &amp;&amp; $asc &lt;= -10247) return &quot;Z&quot;;</span><br><span class="line">    return NULL;</span><br><span class="line">    //return $character ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">echo getFirstChar(&quot;我的&quot;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux下查看系统版本号信息的方法</title>
      <link href="/2019/03/05/linux/"/>
      <url>/2019/03/05/linux/</url>
      
        <content type="html"><![CDATA[<h3 id="查看Linux内核版本命令"><a href="#查看Linux内核版本命令" class="headerlink" title="查看Linux内核版本命令"></a>查看Linux内核版本命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat /proc/version</span><br><span class="line">uname -a</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>最近下班在做的事情</title>
      <link href="/2018/11/16/todo/"/>
      <url>/2018/11/16/todo/</url>
      
        <content type="html"><![CDATA[<h3 id="学习vue"><a href="#学习vue" class="headerlink" title="学习vue"></a>学习vue</h3><p>通读了一下vue的文档</p><a id="more"></a><h3 id="将之前的小程序改成vue"><a href="#将之前的小程序改成vue" class="headerlink" title="将之前的小程序改成vue"></a>将之前的小程序改成vue</h3><p>在改vue的过程中遇到的问题<br><strong>1.跨域问题解决办法： </strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">proxyTable: &#123;</span><br><span class="line"> &apos;/api&apos;: &#123;</span><br><span class="line">   target: &apos;http://bl.7yue.pro/v1/&apos;,</span><br><span class="line">   changeOrigin: true, //可否跨域</span><br><span class="line">   pathRewrite: &#123;</span><br><span class="line">     &apos;^/api&apos;: &apos;&apos;</span><br><span class="line">   &#125;,</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p><strong>2.引入本地图片 </strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import likeSrc from &apos;./images/like.png&apos;</span><br></pre></td></tr></table></figure></p><p><strong>3.vue异步加载数据子组件数据不是最新的</strong><br>方式1：<a href="https://segmentfault.com/q/1010000009036850" target="_blank" rel="noopener">传送门</a><br>方式2：通过<code>wathc</code>侦听器监听数据的改变<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">watch:&#123;</span><br><span class="line">       count:function(val)&#123;</span><br><span class="line">           this.selfCount = val</span><br><span class="line">       &#125;,</span><br><span class="line">       like:function(val)&#123;</span><br><span class="line">           this.selfLike = val</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;,</span><br></pre></td></tr></table></figure></p><p><strong>4.vue带参数跳转页面</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div  v-for=&quot;(item,key) of books&quot; :key=&quot;key&quot; &gt;</span><br><span class="line">                   &lt;router-link :to=&quot;&#123; name: &apos;BookDetail&apos;, params: &#123; id: item.id &#125;&#125;&quot;&gt;</span><br><span class="line">                       &lt;cmp-book  v-if=&quot;item&quot; :book=&quot;item&quot; &gt;&lt;/cmp-book&gt;</span><br><span class="line">                   &lt;/router-link&gt;</span><br><span class="line">               &lt;/div&gt;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mounted() &#123;</span><br><span class="line">       this.id = this.$route.params.id</span><br><span class="line">       console.log(this.id)</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><!--more-->]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>学习Vue</title>
      <link href="/2018/10/25/vue/"/>
      <url>/2018/10/25/vue/</url>
      
        <content type="html"><![CDATA[<p><img src="/2018/10/25/vue/lifecycle.png" alt=""><br><a id="more"></a></p><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><ol><li>生命周期就是vue实例在某一个时间点自动执行的函数</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;Vue的生命周期钩子&lt;/title&gt;</span><br><span class="line">&lt;script src=&quot;./js/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">var vm = new Vue(&#123;</span><br><span class="line">el:&apos;#app&apos;,</span><br><span class="line">data:&#123;</span><br><span class="line">msg:&quot;hello world&quot;</span><br><span class="line">&#125;,</span><br><span class="line">template:&quot;&lt;div&gt;&#123;&#123;msg&#125;&#125;&lt;/div&gt;&quot;,</span><br><span class="line">beforeCreate:function () &#123;</span><br><span class="line">console.log(&apos;before create&apos;);</span><br><span class="line">&#125;,</span><br><span class="line">created:function()&#123;</span><br><span class="line">console.log(&apos;created&apos;);</span><br><span class="line">&#125;,</span><br><span class="line">beforeMount:function()&#123;</span><br><span class="line">console.log(this.$el);</span><br><span class="line">console.log(&apos;beforeMount&apos;);</span><br><span class="line">&#125;,</span><br><span class="line">mounted:function()&#123;</span><br><span class="line">console.log(this.$el);</span><br><span class="line">console.log(&apos;mounted&apos;);</span><br><span class="line">&#125;,</span><br><span class="line">beforeDestroy:function()&#123;</span><br><span class="line">console.log(&apos;beforeDestroy&apos;);</span><br><span class="line">&#125;,</span><br><span class="line">destroyed:function()&#123;</span><br><span class="line">console.log(&apos;destroyed&apos;);</span><br><span class="line">&#125;,</span><br><span class="line">beforeUpdate:function()&#123;</span><br><span class="line">console.log(&apos;beforeUpdate&apos;);</span><br><span class="line">&#125;,</span><br><span class="line">updated:function()&#123;</span><br><span class="line">console.log(&apos;updated&apos;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>在执行生命后期钩子函数的时候会发现<code>beforeDestroy</code> <code>destroyed</code>并未执行。 原因是我们需要在此之前调用<code>vm.$destory();</code><br><code>beforeUpdate</code> <code>updated</code>执行的前提是<code>data</code>中的数据发生改变的时候。因此我们需要用改变<code>msg</code>的值，<code>vm.$data.msg = &#39;hello&#39;</code>就可以看到函数执行<br><!--more--></p><h3 id="Vue中ref的使用"><a href="#Vue中ref的使用" class="headerlink" title="Vue中ref的使用"></a>Vue中ref的使用</h3><p>如果我们在使用<code>Vue</code>的时候获取<code>dom</code>中的内容的时候，应该怎么办呢？<br>请看下面的这段代码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;ref&lt;/title&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;./js/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line"> &lt;div ref=&quot;hello&quot; @click=&quot;handleCliclk&quot;&gt;</span><br><span class="line"> hello world</span><br><span class="line"> &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">var vm = new Vue(&#123;</span><br><span class="line">el:&quot;#app&quot;,</span><br><span class="line">methods:&#123;</span><br><span class="line">handleCliclk:function()&#123;</span><br><span class="line">console.log(this.$refs.hello.innerHTML)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>在点击<code>hello world</code>的时候，需要打印出hello world，我们就可以使用 <code>ref</code>.<br>在组件中使用<code>ref</code>,请看下面<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">&lt;counter ref=&quot;one&quot; @change=&quot;handleChange&quot;&gt;&lt;/counter&gt;</span><br><span class="line">&lt;counter ref=&quot;two&quot; @change=&quot;handleChange &quot;&gt;&lt;/counter&gt;</span><br><span class="line">&lt;div&gt;&#123;&#123;total&#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">Vue.component(&quot;counter&quot;,&#123;</span><br><span class="line">template:&quot;&lt;div @click=&apos;handleClick&apos;&gt;&#123;&#123;number&#125;&#125;&lt;/div&gt;&quot;,</span><br><span class="line">data:function()&#123;</span><br><span class="line">return &#123;</span><br><span class="line">number:0</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">methods:&#123;</span><br><span class="line">handleClick:function()&#123;</span><br><span class="line">this.number++;</span><br><span class="line">this.$emit(&quot;change&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">var vm = new Vue(&#123;</span><br><span class="line">el:&quot;#app&quot;,</span><br><span class="line">data:&#123;</span><br><span class="line">total:0</span><br><span class="line">&#125;,</span><br><span class="line">methods:&#123;</span><br><span class="line">handleChange:function()&#123;</span><br><span class="line">let one = this.$refs.one.number;</span><br><span class="line">let two = this.$refs.two.number;</span><br><span class="line">this.total = one + two;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Chorme自带原生截图</title>
      <link href="/2018/10/23/screenshot/"/>
      <url>/2018/10/23/screenshot/</url>
      
        <content type="html"><![CDATA[<h3 id="可视范围截图"><a href="#可视范围截图" class="headerlink" title="可视范围截图"></a>可视范围截图</h3><p>1.<code>Ctrl + Shift + I</code>调出控制台。<br>2.<code>Ctrl + Shift +　P</code>调出命令菜单<br>3.输入<code>Capture screenshot</code>回车</p><h3 id="全页面截图"><a href="#全页面截图" class="headerlink" title="全页面截图"></a>全页面截图</h3><p>1.<code>Ctrl + Shift + I</code>调出控制台。<br>2.<code>Ctrl + Shift +　P</code>调出命令菜单<br>3.输入<code>Capture full size screenshot</code>回车</p><p><a href="https://developers.google.com/web/updates/2017/08/devtools-release-notes" target="_blank" rel="noopener">参考资料</a>（ps:科学上网）</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>记录最近喜欢的一句话</title>
      <link href="/2018/10/11/Sentence/"/>
      <url>/2018/10/11/Sentence/</url>
      
        <content type="html"><![CDATA[<p>心上无垢，林间有风。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>小程序</title>
      <link href="/2018/09/19/mina/"/>
      <url>/2018/09/19/mina/</url>
      
        <content type="html"><![CDATA[<h3 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h3><p><img src="/2018/09/19/mina/mina.png" alt="小程序"></p><h3 id="弹性盒子"><a href="#弹性盒子" class="headerlink" title="弹性盒子"></a>弹性盒子</h3><p>对于弹性盒子，我们需要知道<code>flex container</code>和<code>flex item</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;view class=&apos;container&apos;&gt;</span><br><span class="line">  &lt;view class=&apos;chunk color1&apos;&gt;1&lt;/view&gt;</span><br><span class="line"></span><br><span class="line">  &lt;view class=&apos;chunk color2&apos;&gt;2&lt;/view&gt;</span><br><span class="line"></span><br><span class="line">  &lt;view class=&apos;chunk color3&apos;&gt;3&lt;/view&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line">.container&#123;</span><br><span class="line">  display: flex;</span><br><span class="line">&#125;</span><br><span class="line">.chunk&#123;</span><br><span class="line">  </span><br><span class="line">  width: 100px;</span><br><span class="line">  height: 100px;</span><br><span class="line">&#125;</span><br><span class="line">.color1&#123;</span><br><span class="line">  background-color: #123321;</span><br><span class="line">&#125;</span><br><span class="line">.color2&#123;</span><br><span class="line">  background-color: #321312;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.color3&#123;</span><br><span class="line">  background-color: #876543;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>正如上面代码所示，我们将最外层的<code>view</code>的样式设置为<code>display:flex</code>时，可以消除块状特性。<br>如果要在一个弹性盒子中指定元素为纵向排列，我们只需要指定<code>flex-direction: column;</code>。</p><p>现在如果我们有这样一个需求，我们需要将这三个色块颠倒，只需要指定<code>flex-direction: row-reverse/column-reverse;</code></p><font color="#FF0000" face="黑体">对于<code>reverse</code>来说高度是自适应的，宽度100%。并且在使用<code>reverse</code>之后不仅仅是元素顺序改变，对齐方式也会改变。</font><p>如果要设置对齐方式怎么办呢。<code>justify-content: center、space-between/around、flex-end/start;</code>就起到了重要的作用<br><strong>2主轴和交叉轴</strong><br>    如何确定谁是主轴,谁是交叉轴。取决于<code>flex-direction</code>。<font color="#FF0000" face="黑体"><code>justify-content</code>指的是主轴方向的排布，<code>align-item</code>指的是交叉轴上的排布</font></p><p>###组件###</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>箭头函数</title>
      <link href="/2018/08/30/arrow-function/"/>
      <url>/2018/08/30/arrow-function/</url>
      
        <content type="html"><![CDATA[<p>使用注意点：</p><p><font color="#FF0000" face="黑体">1.函数体内的this对象，就是定义时所在的对象，而不是使用时所在的对象。</font><br>2.不可以做构造函数，也就是说，不可以用<code>new</code>，否则会抛出一个错误。<br>3.不可以使用<code>arguments</code>对象，该对象在函数体内不存在。如果要使用，可以用<code>Rest</code>参数代替。<br>4.不可以用<code>yield</code>,因此箭头函数不能用做<code>Gennrate</code>函数<br><a id="more"></a></p><p><font color="#FF0000" face="黑体">请注意第一点，<code>this</code>对象是可变的，但是在箭头函数中是固定的</font><br>举个栗子：<br>普通函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    var f =function()&#123;</span><br><span class="line">        this.a =&apos;a&apos;,</span><br><span class="line">        this.b =&apos;b&apos;,</span><br><span class="line">        this.c =&#123;</span><br><span class="line">            a:&apos;a+&apos;,</span><br><span class="line">            b:function()&#123;</span><br><span class="line">                return this.a</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    console.log(new f().c.b()) // a+</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>箭头函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    var f = function()&#123;</span><br><span class="line">        this.a = &apos;a&apos;,</span><br><span class="line">        this.b = &apos;b&apos;,</span><br><span class="line">        this.c = &#123;</span><br><span class="line">            a:&apos;a+&apos;,</span><br><span class="line">            b:()=&gt;&#123;</span><br><span class="line">                return this.a</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    console.log(new f().c.b())  //a</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在看一个栗子<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    function foo()&#123;</span><br><span class="line">        setTimeout(() =&gt; &#123;</span><br><span class="line">            console.log(&apos;id:&apos;,this.id)</span><br><span class="line">        &#125;, 100);</span><br><span class="line">    &#125;</span><br><span class="line">    var id =21</span><br><span class="line">    foo.call(&#123;id:42&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这个输出的是42的原因是：箭头函数的定义生效时在<code>foo</code>函数生成时，而真正执行的是时候是在100ms之后，如果是普通函数，这个<code>this</code>的指向是<code>window</code>,此时输出21。但是<font color="#FF0000" face="黑体">箭头函数导致<code>this</code>总是指向函数定义生效是所在的对象</font>所以输出42。 </p><!--more-->]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>javaScript中this</title>
      <link href="/2018/08/22/js-this/"/>
      <url>/2018/08/22/js-this/</url>
      
        <content type="html"><![CDATA[<p>总结一下this，之前一直都是蛮懵逼的。this这个玩意是什么呢，在面向对象语言中，比如PHP中this代表的是某个的对象。而在NB的js中这玩意玄乎的不要不要的。稍微不注意就会挂在这里，其实只要弄明白函数的几种调用场景就能很清晰地理解this了。下面一一来搞定。<br><a id="more"></a></p><h3 id="用作函数调用"><a href="#用作函数调用" class="headerlink" title="用作函数调用"></a>用作函数调用</h3><p>这种形式是在js中调用最为广泛的一种形式。比如这段函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function sayWords()&#123;</span><br><span class="line">    alert(this.words);</span><br><span class="line">&#125;</span><br><span class="line">sayWords();</span><br></pre></td></tr></table></figure></p><p>当我们运行<code>sayWord()</code>的时候会发什么呢？很显然，会显示出一个没有找到words这个属性的错误提示。好了，我们改一下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var words = &apos;hello javascript&apos;</span><br><span class="line">function sayWords()&#123;</span><br><span class="line">    alert(this.words);</span><br><span class="line">&#125;</span><br><span class="line">sayWords();</span><br></pre></td></tr></table></figure></p><p>这个时候我们知道了，<font color="#FF0000" face="黑体">当用作函数调用的时候，函数体里的this指的是window这个对象</font></p><p>事情到这里还没有结束，看看那下面这段代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function sayWords()&#123;</span><br><span class="line">    alert(this.words);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var Student = &#123;</span><br><span class="line">    words:&quot;hello world&quot;,</span><br><span class="line">    sayWords:function()&#123;</span><br><span class="line">        sayWords();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Student.sayWords();</span><br></pre></td></tr></table></figure><p>当运行<code>Student.sayWords()</code>的时候会发生什么，会alert出<code>hello world</code>?运行时话发现找不到这个属性。报错了。<br>解决办法一：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function sayWords()&#123;</span><br><span class="line">    alert(this.words);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var Student = &#123;</span><br><span class="line">    words:&quot;hello world&quot;,</span><br><span class="line">    sayWords:function()&#123;</span><br><span class="line">        sayWords.apply(this); //注意这里，也可以用sayWords.call(this)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Student.sayWords();</span><br></pre></td></tr></table></figure><p>在上面的代码中，我们使用了sayWords.apply(this)，当然我们使用sayWords.call(this)也可以达到相同的效果，在这里，我们强制将sayWords中this改变为Student对象了，这样就能正确的hello world了:0<br>还可以这样<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">function sayWords()&#123;</span><br><span class="line">    alert(this.words);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var Student = &#123;</span><br><span class="line">    words:&quot;hello world&quot;,</span><br><span class="line">    sayWords:function()&#123;</span><br><span class="line">        var sayWords2 = sayWords.bind(this); //注意这里，也可以用sayWords.call(this)</span><br><span class="line">        sayWords2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Student.sayWords();</span><br></pre></td></tr></table></figure></p><p>上面的sayWords2 = sayWords.bind(this);这里用了ES5的bind方法，<font color="#FF0000" face="黑体">该方法会创建一个函数的实例，其this值会通被绑定到传给bind()函数的值 </font><br>第二种：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">var Student = &#123;</span><br><span class="line">    words:&quot;hello world&quot;,</span><br><span class="line">    sayWords:function()&#123;</span><br><span class="line">        var that = this;</span><br><span class="line"></span><br><span class="line">        function sayWords()&#123;</span><br><span class="line">            alert(that.words);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        sayWords();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Student.sayWords();</span><br></pre></td></tr></table></figure></p><p>这种解法应该是很普遍的吧，先把this赋值给另外一个变量，按照习惯，我们一般将这个变量叫做that或者self。这样我们再tath.words的时候就肯定是对的。</p><h3 id="作为对象的方法"><a href="#作为对象的方法" class="headerlink" title="作为对象的方法"></a>作为对象的方法</h3><p>这种形式应该是用的最多最广的吧。比如说下面这种代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">ar Student = &#123;</span><br><span class="line">    name:&quot;Edward&quot;,</span><br><span class="line">    age:18,</span><br><span class="line">    showName:function()&#123;</span><br><span class="line">        alert(this.name);</span><br><span class="line">    &#125;,</span><br><span class="line">    showAge:function()&#123;</span><br><span class="line">       alert(this.age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Student.showName(); // Edward</span><br><span class="line">Student.showAge();  // 18</span><br></pre></td></tr></table></figure></p><p>这里面Student.showName和Student.showAge中this指向的就是Student这个对象，相应的this.name就是Stduent.name了。</p><h3 id="用作构造函数"><a href="#用作构造函数" class="headerlink" title="用作构造函数"></a>用作构造函数</h3><p>我们应该常常用这种方法来进行类的实现，尤其是对象的创建的时候，比如:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function Student()&#123;</span><br><span class="line">    this.name = &quot;Edward&quot;;</span><br><span class="line">    this.age  = 18;</span><br><span class="line">    this.sayName = function()&#123;</span><br><span class="line">        alert(this.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var student = new Student();</span><br><span class="line">student.name = &quot;Julia Gan&quot;;</span><br><span class="line">this.sayName();</span><br></pre></td></tr></table></figure></p><p>运行后会alert出”Julia Gan”的字符串，所以在这里，this在这里指向的是student这个对象</p><h3 id="用作apply和call的方法"><a href="#用作apply和call的方法" class="headerlink" title="用作apply和call的方法"></a>用作apply和call的方法</h3><p>参考上面，函数的this所指的就是apply/call中传进来的this对象了<br><!--more--></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>鬼畜</title>
      <link href="/2018/08/16/101/"/>
      <url>/2018/08/16/101/</url>
      
        <content type="html"><![CDATA[<p><img src="/2018/08/16/101/101.jpg" alt=""><br><a id="more"></a></p><p>祝贺杨超越同学成功入驻鬼畜全明星以及燃烧我的卡路里血洗B站鬼畜区，太TM魔性了。<a href="https://www.bilibili.com/video/av28809991" target="_blank" rel="noopener">哔哩哔哩 (゜-゜)つロ 干杯~-bilibili</a><br><!--more--></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>妈妈再也不怕我斗图斗不过了</title>
      <link href="/2018/08/15/emoji/"/>
      <url>/2018/08/15/emoji/</url>
      
        <content type="html"><![CDATA[<p><strong><em>流量党慎入！！！</em></strong><br><strong><em>流量党慎入！！！</em></strong><br><strong><em>流量党慎入！！！</em></strong><br><a href="http://www.bee-ji.com" target="_blank" rel="noopener">斗图集散地</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Flask核心对象</title>
      <link href="/2018/08/09/core/"/>
      <url>/2018/08/09/core/</url>
      
        <content type="html"><![CDATA[<hr><p>应用上下文 <code>Flask</code><br>请求上下文 <code>Request</code><br><a id="more"></a><br><code>Flask</code>的核心对象是在<code>AppContext</code>中<br><code>Request</code>是在<code>RequestContext</code>中<br>这两个上下文都是实现了<code>push()</code>,<code>pop()</code>,<code>__enter__()</code>,<code>__exit__()</code>。<br>我画了个图，方便自己理解这个玩意。<br><img src="/2018/08/09/core/context.png" alt="core"></p><h3 id="核心对象"><a href="#核心对象" class="headerlink" title="核心对象"></a>核心对象</h3><p><strong> 1.</strong>当一个请求进入Flask框架后，Flask会实例化一个<code>RequestContext</code>,这个请求上下文封装了这次请求相关信息，这个信息就保存在<code>Request</code>中。接着Flask会吧这个<code>Appcontext</code>推入到栈中,Flask中用<code>localStack</code>来表示一个栈，<code>localstack</code>是一个对象，需要实例化。Flask中用<code>_request_ctx_stack</code>来表示。同理<code>AppContext</code>也是这样的过程，用<code>_app_ctx_stack</code>表示。<br><strong> 2.</strong>当一个请求进入的时候，Flask会把<code>Requset</code>通过<code>push()</code>推入到栈中。<br>那么<code>AppContext</code>是怎么入栈。<code>Requesr</code>在入栈之前会去检查<code>_app_ctx_stack</code>的栈顶元素，如果当前栈顶是空或者不是当前对象，Flask会推<code>AppContext</code>到<code>_app_ctx_stack</code>中，然后才会将<code>RequestContext</code>推入<code>_request_ctx_stack</code>中，请求结束后，两个栈中的内容会执行<code>pop()</code>弹出<br><strong> 3.</strong><code>current_app</code>,<code>request</code>是指向的<code>_app_ctx_stack</code>,<code>_request_ctx_stack</code>的栈顶元素，如果栈中是有值的，是不会出现<code>localproxy unband</code>的情况。<br>我们看一下这个<code>test.py</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">from flask import Flask</span><br><span class="line">app = flask(__name__)</span><br><span class="line">a  = current_app</span><br></pre></td></tr></table></figure></p><p>在调试模式下，我们会看到<code>localproxy unband</code>,原因是<code>_app_ctx_stack</code>为空。<br>解决办法一<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from flask import Flask</span><br><span class="line">app = flask(__name__)</span><br><span class="line">ctx = app.app_context()</span><br><span class="line">ctx.push()</span><br><span class="line">a  = current_app</span><br><span class="line">ctx.pop()</span><br></pre></td></tr></table></figure></p><p>解决办法二<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from flask import Flask</span><br><span class="line">app = flask(__name__)</span><br><span class="line">with app.app_context():</span><br><span class="line">a  = current_app</span><br></pre></td></tr></table></figure></p><h3 id="with"><a href="#with" class="headerlink" title="with"></a>with</h3><p><code>with</code>实现的原理：实现<code>__enter__()</code>,<code>__exit__()</code><br><code>with</code>用处：<br>    实现了上下文管理协议的对象使用with，称为上下文管理器<br>    怎么实现一个上下文管理器。实现<code>__enter__()</code>,<code>__exit__()</code>即可<br>    上下文表达式必须要返回一个上下文管理器<br>关于<code>as</code>,看一下这段代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class A:</span><br><span class="line">def __enter__(self):</span><br><span class="line">a = 1</span><br><span class="line">def __exit__(self,exc_type,exc_vlaue,tb):</span><br><span class="line">b = 2</span><br><span class="line">with A() as obj：</span><br><span class="line">pass</span><br></pre></td></tr></table></figure></p><p><code>obj</code>并不是所认为的上下文管理器，在调试模式下，可以看到<code>obj:None</code>,在<code>__enter__()</code>中增加<code>return a</code>,再次进入调试模式，可以看到<code>obj:1</code><br>在看一个具体的代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">class MyResource:</span><br><span class="line">def __enter__(self):</span><br><span class="line">print(&apos;connect to resource&apos;)</span><br><span class="line">return self</span><br><span class="line">def __exit__(self,exc_type,exc_value,tb):</span><br><span class="line">print(&apos;close to resource&apos;)</span><br><span class="line">def query(self):</span><br><span class="line">print(&apos;query data&apos;)</span><br><span class="line">with MyResource() as resource:</span><br><span class="line">resource.query()</span><br></pre></td></tr></table></figure></p><p><code>__exit__()</code>主要是用来回收资源的，<code>exc_type ,exc_value, tb</code>这三个参数是用来处理异常的，调试模式下，我们可以这三个参数的值是<code>None</code>。<br>我们修改一下这段代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">with MyResource() as resource:</span><br><span class="line">1/0</span><br><span class="line">resource.query()</span><br></pre></td></tr></table></figure></p><p>在调试模式下，<code>exc_type, exc_value, tb</code>这三个参数是有值的，然后就可以在<code>__exit__</code>中处理异常，<br>此外<code>__exit__()</code>需要返回<code>True</code>或者<code>False</code>,<code>True</code>表示外部不需要再处理异常，<code>False</code>表示在外部还需要处理异常。在<code>__exit__()</code>中什么都不返回，调用结果是<code>None</code>，在Python中<code>None</code>也是<code>False</code>。<br><!--more--></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>thinkphp5.1</title>
      <link href="/2018/08/09/thinkphp5/"/>
      <url>/2018/08/09/thinkphp5/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p>thinkphp5.1试水。<br><!--more--></p><h3 id="独立验证"><a href="#独立验证" class="headerlink" title="独立验证"></a>独立验证</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public function getBanner($id)&#123;</span><br><span class="line"></span><br><span class="line">       $validate = Validate::make([</span><br><span class="line">           &apos;name&apos;=&gt;&apos;require|max:10&apos;,</span><br><span class="line">           &apos;email&apos;=&gt;&apos;email&apos;</span><br><span class="line"></span><br><span class="line">       ]);</span><br><span class="line">       $data = [</span><br><span class="line">           &apos;name&apos;=&gt;&apos;vendervender&apos;,</span><br><span class="line">           &apos;email&apos;=&gt;&apos;venderqq.com&apos;</span><br><span class="line">       ];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       $result = $validate-&gt;batch()-&gt;check($data);</span><br><span class="line">       dump($validate-&gt;getError());</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>回归</title>
      <link href="/2018/08/07/LOL/"/>
      <url>/2018/08/07/LOL/</url>
      
        <content type="html"><![CDATA[<p><img src="/2018/08/07/LOL/anivia.jpg" alt="anivia"><br>2017年8月7号上午，<a href="https://panda.tv/15403" target="_blank" rel="noopener">熊猫花小乐</a>回归联盟。祝好，BB乐。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>记录一段在知乎看的话</title>
      <link href="/2018/08/06/text/"/>
      <url>/2018/08/06/text/</url>
      
        <content type="html"><![CDATA[<p>这样的女子，来的时候百花齐放，去时却不是荼蘼满地，而是留下了春天。<br>你应该羡慕自己，在不合适的季节谈了一场合适的恋爱。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>重定向</title>
      <link href="/2018/08/03/redirect/"/>
      <url>/2018/08/03/redirect/</url>
      
        <content type="html"><![CDATA[<h3 id="关于重定向"><a href="#关于重定向" class="headerlink" title="关于重定向"></a>关于重定向</h3><p>之前一直对重定向懵懂，于是今儿抽空对重定向做个总结，利人利己。画的有点丑，将就看。emmm<br><a id="more"></a><br><img src="/2018/08/03/redirect/redirect.png" alt="redirect"></p><p>首先是这样的，从浏览器中请求一个<code>url1</code>，如果一切正常，服务器会返回<code>url1</code>对应的资源，并将<code>status code</code>设置成<code>200</code>,这是一个正常的过程，而重定向却不是这样的。浏览器还是访问<code>url1</code>,服务器在接受到这个请求之后，出于某个原因，服务器没有<code>url1</code>对应的资源，或者服务器不想让访问<code>url1</code>对应的页面等等，那么此时服务器会在<code>response header</code>中增加一个<code>localtion:url2</code>并将<code>status code</code>设置为<code>301/302</code>,返回结果之后，浏览器发现<code>status code</code>是<code>301/302</code>,这个时候浏览器就会知道服务器需要你进行一次重定向，而这个新的地址则是<code>localtion</code>中的<code>url2</code>。这就是一个重定向的过程。<br><!--more--></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Flask</title>
      <link href="/2018/08/03/flask/"/>
      <url>/2018/08/03/flask/</url>
      
        <content type="html"><![CDATA[<p>最近准备把之前的学习php的撸的一个API改写成flask。磨刀不误砍柴工，在这里做一些flsak的总结。</p><a id="more"></a><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>安装pipenv：<code>pip install pipenv</code><br>创建一个虚拟环境：<code>pipenv install</code><br>进入虚拟环境：<code>pipenv shell</code><br>退出虚拟环境：<code>exit</code><br>查看目前安装的库及其依赖: <code>pipenv graph</code><br><strong><em>关于更多的pipenv命令</em></strong>：<a href="https://github.com/pypa/pipenv" title="pipenv" target="_blank" rel="noopener">pipenv</a></p><p>安装flask:进入虚拟环境之后，执行<code>pipenv instasll flask</code>,如果不报错或者没有提示中不到命令，那么安装成功。</p><p>如何确定虚拟环境：进入对应的文件夹，<code>pipenv shell</code>进入虚拟环境,执行<code>pipenv --venv</code></p><h3 id="实现Flask的最小元型"><a href="#实现Flask的最小元型" class="headerlink" title="实现Flask的最小元型"></a>实现Flask的最小元型</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">from flask import Flask</span><br><span class="line"></span><br><span class="line">app = flask(__name__)</span><br><span class="line"></span><br><span class="line">#app.route()其实内部什么都没做，只是调用了add_url_rule()</span><br><span class="line">@app.route(&apos;/hello&apos;)</span><br><span class="line">def hello():</span><br><span class="line">return &apos;hello,咸鱼&apos;</span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">app.run()</span><br></pre></td></tr></table></figure><p>也可以这样写<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">from flsak import Flask</span><br><span class="line"></span><br><span class="line">app = flask(__name__)</span><br><span class="line"></span><br><span class="line">def hello():</span><br><span class="line">return &apos;hello，咸鱼&apos;</span><br><span class="line">app.add_url_rule(&apos;/hello&apos;,view_func=&apos;hello&apos;）#这种方式适用于基于类的视图</span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">app.run()</span><br></pre></td></tr></table></figure></p><p>这样启动web服务，访问<code>127.0.0.1:5000/hello</code>就会看到<code>hello,咸鱼</code></p><h3 id="Flask的配置文件"><a href="#Flask的配置文件" class="headerlink" title="Flask的配置文件"></a>Flask的配置文件</h3><p>我们拿这个开启debug模式来说，一般来说我们可以通过<code>app.run(debug=True)</code>的方式来开启<code>debug</code>模式，但是对于一个项目了来说开发环境和生产环境应该是一个镜像的关系，简单来说，生产和开发环境源码应该是一致的。</p><p>可以在文件的根目录下建一个<code>config.py</code>的模块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#config.py</span><br><span class="line"></span><br><span class="line">DEBUG = True</span><br></pre></td></tr></table></figure><p>那么问题来了，我们怎么用这个玩意。<br>第一种方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">from flask import Flsak</span><br><span class="line">from config import DEBUG</span><br><span class="line"></span><br><span class="line">app = flask(__name__)</span><br><span class="line"></span><br><span class="line">@app.route(&apos;/hello&apos;)</span><br><span class="line">def hello():</span><br><span class="line">return &apos;hello,咸鱼&apos;</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">app.run(debug = DEBUG)</span><br></pre></td></tr></table></figure></p><p>第二种方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">from flask import Flask</span><br><span class="line">app = flask(__name__)</span><br><span class="line">app.config.from_object(&apos;config&apos;) #这个是模块的路径。</span><br><span class="line"></span><br><span class="line">省略中间</span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">app.run(debug = app.config[&apos;DEBUG&apos;])</span><br></pre></td></tr></table></figure></p><h3 id="视图函数与普通函数的区别"><a href="#视图函数与普通函数的区别" class="headerlink" title="视图函数与普通函数的区别"></a>视图函数与普通函数的区别</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@app.route(&apos;/hello&apos;)</span><br><span class="line">def hello():</span><br><span class="line">return &apos;hello，咸鱼&apos;</span><br><span class="line"></span><br><span class="line">def sayHello():</span><br><span class="line">return &apos;hello，咸鱼&apos;</span><br></pre></td></tr></table></figure><p>在<code>hello()</code>这个视图函数中。除了主要的内容也就是<code>hello,咸鱼</code>，还会返回一系列的东西<code>status code</code>、<code>content-type</code>等等，其实<code>flask</code>在这个过程中做了很多事情，它会把你返回的这个主体内容作为一个<code>response</code>对象。我们也可以这样写<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@app.route(&apos;/hello&apos;)</span><br><span class="line">def hello():</span><br><span class="line">headers = &#123;</span><br><span class="line">&apos;content-type&apos;:&apos;text/plain&apos;</span><br><span class="line">&#125;</span><br><span class="line">response = make_response(&apos;这里是你要返回的内容&apos;，200)</span><br><span class="line">response.headers = headers</span><br><span class="line">return response</span><br></pre></td></tr></table></figure></p><p>还可以这样写<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@app.route(&apos;/hello&apos;)</span><br><span class="line">def hello():</span><br><span class="line">headers =&#123;</span><br><span class="line">&apos;content-type&apos;:&apos;text/plain&apos;</span><br><span class="line">&#125;</span><br><span class="line">return &apos;hello,xianyu&apos;,200,headers</span><br></pre></td></tr></table></figure></p><h3 id="关于if-name-39-main-39"><a href="#关于if-name-39-main-39" class="headerlink" title="关于if __name__ == &#39;__main__&#39;"></a>关于<code>if __name__ == &#39;__main__&#39;</code></h3><p>1.它检查<code>__name__</code>Python脚本的属性是否为<code>__main__</code>。换句话说，如果程序本身被执行，属性将是<code>__main__</code>，所以程序将被执行（在这种情况下是main()函数）。</p><p>但是，如果模块使用Python脚本，if则会执行语句之外的任何代码，因此<code>if __name__ == &quot;__main__&quot;</code>仅用于检查程序是否用作模块，因此决定是否运行代码</p><p>2.具体到flask中，在开发环境用的是<code>flask</code>自带的一个服务器，而在生产环境中我们是一般用的是<code>nginx</code>+<code>uwsgi</code>,<code>nginx</code>作为前置服务器来接受浏览器发来的请求，然后转发给<code>uwsgi</code>,<code>uwsgi</code>会加载我们的主文件模块，那么现在我们主文件的<code>app.run()</code>是不会起作用的，在回过头来，我们在看这个如果没有<code>if __name__ == &#39;main&#39;</code>的情况下，在<code>uwsgi</code>加载主文件模块之后，就会启动我们<code>flask</code>内置的web服务器，现在我们已经有了<code>uwsgi</code>作为我们的web服务器，两个服务器启动时不允许的。</p><h3 id="flask-sqlalchemy"><a href="#flask-sqlalchemy" class="headerlink" title="flask-sqlalchemy"></a>flask-sqlalchemy</h3><p>1.安装<code>sqlalchemy</code>,<code>pipenv instasll flask-sqlalchemy</code></p><p>2.通过<code>sqlalchemy</code>建立一个模型<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">from sqlalchemy import Column,Integer,String</span><br><span class="line">from flask_sqlalchemy import SQLAlchemy</span><br><span class="line"></span><br><span class="line">db = SQLAlchemy()</span><br><span class="line">class user(db.Model):</span><br><span class="line">id = Column(Integer,primary_key=True,autoincrement=True)</span><br><span class="line">username = Column(String(20),nullable=false)</span><br><span class="line">age = Column(Integer,default=0)</span><br></pre></td></tr></table></figure></p><p>3.将<code>sqlalchemy</code>核心对象关联<code>flask</code>核心对象<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db.init_app(app)</span><br><span class="line">db.create_all(app=app)</span><br></pre></td></tr></table></figure></p><p>3.连接数据库<br>安装cymysql:<code>pipenv install cymysql</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SQLALCHEMY_DATABASE_URI = &apos;mysql+cymysql://root:123456@localhost:3306/database&apos;</span><br></pre></td></tr></table></figure><!--more-->]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>最近一个月的计划</title>
      <link href="/2018/08/02/plan/"/>
      <url>/2018/08/02/plan/</url>
      
        <content type="html"><![CDATA[<p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1533182971827&amp;di=6a46ce1f518d8834f4d085718395ea9c&amp;imgtype=0&amp;src=http%3A%2F%2Fup.92sucai.com%2Fold%2Fallimg%2F150525%2F1307-150525105350.jpg" alt="code"><br><a id="more"></a><br>之前跟着七月学习了flask框架，最近想把之前用php+小程序的一个微商城用flask重新撸一次，对flask总结以及小程序的复习。<br>时间：一个月<br><!--more --></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>我的博客</title>
      <link href="/2018/07/30/blog/"/>
      <url>/2018/07/30/blog/</url>
      
        <content type="html"><![CDATA[<h3 id="我的博客"><a href="#我的博客" class="headerlink" title="我的博客"></a>我的博客</h3><p><img src="https://wxt.sinaimg.cn/thumb300/7d5c3dccgy1ft3rp7owxdj20m80xc40k.jpg?tags=%5B%5D" alt="avatar"><br><a id="more"></a></p><p>大概高中的时候是有写日记的习惯，都是写些鸡毛蒜皮的碎碎念，也是坚持了两年多，大学的时候就没有再坚持写下去了。直到现在我的行李箱中还放着那三本厚厚的关于我高中生活的日记本。也算是对自己高中的一个交代吧。<br>现在开这个博客。希望自己能坚持下去吧，就这样。</p><!--more-->]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
