<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>江边的旱鸭子</title>
  
  <subtitle>愿你走过半生，归来仍是少年。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-08-27T03:05:02.102Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>咸鱼</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Redis</title>
    <link href="http://yoursite.com/2019/08/26/redis/"/>
    <id>http://yoursite.com/2019/08/26/redis/</id>
    <published>2019-08-26T15:56:45.000Z</published>
    <updated>2019-08-27T03:05:02.102Z</updated>
    
    <content type="html"><![CDATA[<p>redis<br><a id="more"></a></p><h3 id="key"><a href="#key" class="headerlink" title="key"></a>key</h3><h4 id="DEL-key-key…"><a href="#DEL-key-key…" class="headerlink" title="DEL key[key…]"></a>DEL key[key…]</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">删除指定的key值，如果不存在，则忽略，返回删除的数量</span><br><span class="line">set k v</span><br><span class="line">set k1 v1</span><br><span class="line">del k k1</span><br></pre></td></tr></table></figure><h4 id="DUMP-key"><a href="#DUMP-key" class="headerlink" title="DUMP key"></a>DUMP key</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">序列化给定的key,如果key不存在，则返回nil，否则返回序列化之后的值</span><br><span class="line">set k 1</span><br><span class="line">dump k</span><br></pre></td></tr></table></figure><h4 id="EXISTS-key-key…"><a href="#EXISTS-key-key…" class="headerlink" title="EXISTS key[key…]"></a>EXISTS key[key…]</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">返回key是不是存在，1存在，0不存在</span><br><span class="line">set k 10</span><br><span class="line">exist k</span><br></pre></td></tr></table></figure><h4 id="EXPIRE-key-seconds"><a href="#EXPIRE-key-seconds" class="headerlink" title="EXPIRE key seconds"></a>EXPIRE key seconds</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">设置key的过期时间,1设置过期时间成功，0不能设置过期时间/key不存在</span><br><span class="line">set k 10</span><br><span class="line">expire k 10</span><br><span class="line">ttl k</span><br></pre></td></tr></table></figure><h4 id="EXPIRE-key-timestamp"><a href="#EXPIRE-key-timestamp" class="headerlink" title="EXPIRE key timestamp"></a>EXPIRE key timestamp</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">设置key的生存时间，参数是unix时间戳</span><br><span class="line">1设置了过期时间，0没有设置过期时间/不能设置过去时间</span><br></pre></td></tr></table></figure><h4 id="PEXPIRE-key-milliseconds"><a href="#PEXPIRE-key-milliseconds" class="headerlink" title="PEXPIRE key milliseconds"></a>PEXPIRE key milliseconds</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">设置key的生存时间，参数是毫秒</span><br><span class="line">1设置成功，0key不存在/设置失败</span><br></pre></td></tr></table></figure><h4 id="KEYS-pattern"><a href="#KEYS-pattern" class="headerlink" title="KEYS pattern"></a>KEYS pattern</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">查找所有符合给定模式pattern（正则表达式）的 key </span><br><span class="line">所有符合条件的key</span><br></pre></td></tr></table></figure><h4 id="MOVE-key-db"><a href="#MOVE-key-db" class="headerlink" title="MOVE key db"></a>MOVE key db</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">将当前数据库的 key 移动到给定的数据库 db 当中</span><br><span class="line">1移动成功</span><br><span class="line">0移动失败</span><br><span class="line"></span><br><span class="line">move key 1</span><br></pre></td></tr></table></figure><h4 id="PERSIST-key"><a href="#PERSIST-key" class="headerlink" title="PERSIST key"></a>PERSIST key</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">将一个带有生存时间的key转换成一个永不过期的key</span><br><span class="line">1:生存时间移除成功</span><br><span class="line">0:key不存在/没有设置生存时间</span><br></pre></td></tr></table></figure><h4 id="PTTL-key"><a href="#PTTL-key" class="headerlink" title="PTTL key"></a>PTTL key</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">返回以毫秒为单位返回key的剩余生存时间/一个错误值</span><br></pre></td></tr></table></figure><h4 id="TTL-key"><a href="#TTL-key" class="headerlink" title="TTL key"></a>TTL key</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">返回以秒为单位返回key的剩余生存时间/一个错误值</span><br></pre></td></tr></table></figure><h4 id="RANDOMKEY"><a href="#RANDOMKEY" class="headerlink" title="RANDOMKEY"></a>RANDOMKEY</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">从当前数据库返回一个随机的key</span><br><span class="line"></span><br><span class="line">返回 nil/key</span><br></pre></td></tr></table></figure><h4 id="RENAME-key-newkey"><a href="#RENAME-key-newkey" class="headerlink" title="RENAME key newkey"></a>RENAME key newkey</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">将key重命名为newkey，如果key与newkey相同，将返回一个错误。如果newkey已经存在，则值将被覆盖</span><br></pre></td></tr></table></figure><h4 id="RENAMENX-key-newkey"><a href="#RENAMENX-key-newkey" class="headerlink" title="RENAMENX key newkey"></a>RENAMENX key newkey</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">当且仅当 newkey 不存在时，将 key 改名为 newkey 。</span><br><span class="line">当 key 不存在时，返回一个错误。</span><br></pre></td></tr></table></figure><h4 id="TYPE-key"><a href="#TYPE-key" class="headerlink" title="TYPE key"></a>TYPE key</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">返回当前key的数据类型，如果key不存在时返回none。</span><br><span class="line"></span><br><span class="line">```</span><br><span class="line"></span><br><span class="line">### string</span><br><span class="line"></span><br><span class="line">#### APPEND key value</span><br></pre></td></tr></table></figure><p>如果key存在且值是字符串则将value追加，如果不存在则创建一个空的字符串并追加，类似于set操作<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### BITCOUNT key [start end]</span><br></pre></td></tr></table></figure></p><p>统计字符串被设置为1的bit数<br>返回被设置为1的数量<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### DECR key</span><br></pre></td></tr></table></figure></p><p>数字：减小之后的value<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### INCR key</span><br></pre></td></tr></table></figure></p><p>执行递增操作后key对应的值。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#### INCRBY key  increment</span><br></pre></td></tr></table></figure></p><p>增加之后key对应的值。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#### INCRBYFLOAT key increment</span><br></pre></td></tr></table></figure></p><p>当前key增加increment后的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#### DECRBY key decrement</span><br></pre></td></tr></table></figure><p>返回一个数字：减少之后的value值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### GET key</span><br></pre></td></tr></table></figure></p><p>key对应的value，或者nil（key不存在时）只对string类型的数据有效<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#### GETRANGE key start end</span><br></pre></td></tr></table></figure></p><p>set key ‘this is key’<br>getrange key 0 1  //th<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### GETSET key value</span><br></pre></td></tr></table></figure></p><p>自动将key对应到value并且返回原来key对应的value。如果key存在但是对应的value不是字符串，就返回错误。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### MGET key[key...]</span><br></pre></td></tr></table></figure></p><p>指定的key对应的values的list<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### MSET key value [key value ...]</span><br></pre></td></tr></table></figure></p><p>对应给定的keys到他们相应的values上。MSET会用新的value替换已经存在的value<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#### MSETNX key value [key value ...]</span><br></pre></td></tr></table></figure></p><p>对应给定的keys到他们相应的values上。只要有一个key已经存在，MSETNX一个操作都不会执行。</p><p>1 如果所有的key被set<br>0 如果没有key被set(至少其中有一个key是存在的)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### PSETEX key milliseconds value</span><br></pre></td></tr></table></figure></p><p>到期时间以毫秒为单位<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### SETEX key seconds value</span><br></pre></td></tr></table></figure></p><p>设置key对应字符串value，并且设置key在给定的seconds时间之后超时过期<br>等同于 set key value  expire key seconds<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### SETNX key value</span><br></pre></td></tr></table></figure></p><p>将key设置值为value，如果key不存在，这种情况下等同SET命令。 当key存在时，什么也不做</p><p>1 如果key被设置了<br>0 如果key没有被设置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### SETRANGE key offset value</span><br></pre></td></tr></table></figure></p><p>覆盖key对应的string的一部分，从指定的offset处开始，覆盖value的长度</p><p>该命令修改后的字符串长度<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### STRLEN key</span><br></pre></td></tr></table></figure></p><p>返回key的string类型value的长度。如果key对应的非string类型，就返回错误</p><p>key对应的字符串value的长度，或者0（key不存在）</p><p><code>`</code><br><!--more--></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;redis&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Linux</title>
    <link href="http://yoursite.com/2019/08/11/linux-1/"/>
    <id>http://yoursite.com/2019/08/11/linux-1/</id>
    <published>2019-08-11T11:56:53.000Z</published>
    <updated>2019-08-26T16:52:54.872Z</updated>
    
    <content type="html"><![CDATA[<p>linux<br><a id="more"></a></p><h3 id="常用处理目录的指令"><a href="#常用处理目录的指令" class="headerlink" title="常用处理目录的指令"></a>常用处理目录的指令</h3><h4 id="cd-change-direectory-变换目录"><a href="#cd-change-direectory-变换目录" class="headerlink" title="cd (change direectory,变换目录)"></a>cd (change direectory,变换目录)</h4><h4 id="pwd-显示目前所在位置"><a href="#pwd-显示目前所在位置" class="headerlink" title="pwd(显示目前所在位置)"></a>pwd(显示目前所在位置)</h4><h4 id="mkdir-建立新目录"><a href="#mkdir-建立新目录" class="headerlink" title="mkdir(建立新目录)"></a>mkdir(建立新目录)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd /home/test</span><br><span class="line">mkdir demo</span><br><span class="line">mkdir -p demo/log</span><br><span class="line">mkdir -m 751 test</span><br></pre></td></tr></table></figure><h4 id="rmdir-删除目录"><a href="#rmdir-删除目录" class="headerlink" title="rmdir(删除目录)"></a>rmdir(删除目录)</h4><h4 id="ls-文件与目录的检视"><a href="#ls-文件与目录的检视" class="headerlink" title="ls(文件与目录的检视)"></a>ls(文件与目录的检视)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">modification time(mtime):文件内容发生改变时会更新这个时间 默认显示mtime</span><br><span class="line">status time(ctime):文件属性/权限发生改变时会更新这个时间</span><br><span class="line">access time(atime):文件内容被取用时会更新这个时间</span><br><span class="line"></span><br><span class="line">date;ls -l b.log ;ls -l --time=atime b.log ;ls -l --time=ctime b.log</span><br></pre></td></tr></table></figure><h4 id="cp-复制文件-目录"><a href="#cp-复制文件-目录" class="headerlink" title="cp(复制文件/目录)"></a>cp(复制文件/目录)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cp 来源文件 目标文件</span><br><span class="line">cp -i 来源文件 目标文件 (若文件已存在，则会询问是否覆盖)</span><br><span class="line">cp -p 来源文件 目标文件(连同文件的属性一起复制过去，常用于备份)</span><br></pre></td></tr></table></figure><h4 id="rm-移除文件或者目录"><a href="#rm-移除文件或者目录" class="headerlink" title="rm(移除文件或者目录)"></a>rm(移除文件或者目录)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rm [-fir] 文件/目录</span><br><span class="line">-f 忽略不存在的文件</span><br><span class="line">-i 删除前会询问使用者是否删除</span><br><span class="line">-r 递归删除，慎用</span><br></pre></td></tr></table></figure><h4 id="mv-移动文件-目录-更名"><a href="#mv-移动文件-目录-更名" class="headerlink" title="mv(移动文件/目录/更名)"></a>mv(移动文件/目录/更名)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mv [fiu] source destination</span><br><span class="line">-f 如果文件存在，则会强制覆盖</span><br><span class="line">-i 如果目标文件存在,则会询问是否覆盖</span><br><span class="line">-u 如果目标文件存在，且source比较新，才会更新</span><br><span class="line">mv a.log b.log demo/ (如果有多个来源/目录，最后一个目标文件一定是目录，将所有文件移动到该目录下)</span><br></pre></td></tr></table></figure><h4 id="获取路径的文件名与目录名称"><a href="#获取路径的文件名与目录名称" class="headerlink" title="获取路径的文件名与目录名称"></a>获取路径的文件名与目录名称</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">basename /etc/sysconfig/network (获取文件名)</span><br><span class="line">dirname /etc/sysconfig/network (获取目录名 )</span><br></pre></td></tr></table></figure><h4 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cat [-AnEnTv]</span><br><span class="line">cat -n b.log (显示行号)</span><br><span class="line">cat -A b.log (显示完整内容包括特殊字符)</span><br></pre></td></tr></table></figure><h4 id="tac-反向显示"><a href="#tac-反向显示" class="headerlink" title="tac(反向显示)"></a>tac(反向显示)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tac b.log(将b.log中的内容倒序显示 )</span><br></pre></td></tr></table></figure><h4 id="nl-添加行号打印"><a href="#nl-添加行号打印" class="headerlink" title="nl(添加行号打印)"></a>nl(添加行号打印)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nl [-bnw] 文件名</span><br></pre></td></tr></table></figure><h4 id="more-一页一页翻动"><a href="#more-一页一页翻动" class="headerlink" title="more(一页一页翻动)"></a>more(一页一页翻动)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">more b.log</span><br></pre></td></tr></table></figure><h4 id="less-一页一页翻动"><a href="#less-一页一页翻动" class="headerlink" title="less(一页一页翻动)"></a>less(一页一页翻动)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">less b.log</span><br></pre></td></tr></table></figure><h4 id="head-取出前几行"><a href="#head-取出前几行" class="headerlink" title="head(取出前几行)"></a>head(取出前几行)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">head [-n number] 文件名</span><br><span class="line">-n 后面接数字，代表显示多少行</span><br></pre></td></tr></table></figure><h4 id="tail-取出后面几行"><a href="#tail-取出后面几行" class="headerlink" title="tail(取出后面几行)"></a>tail(取出后面几行)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tail [-n number] 文件名</span><br><span class="line">-n 后面数字，代表显示几行</span><br><span class="line">-f 表示持续侦测后面所接的文档名，ctrl+c才会结束侦测</span><br></pre></td></tr></table></figure><h4 id="touch-创建文件"><a href="#touch-创建文件" class="headerlink" title="touch(创建文件)"></a>touch(创建文件)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">touch [-acdmt] 文件名</span><br><span class="line">-a : 修改atime</span><br><span class="line">-c : 修改文件时间，文件不存在则不建立新文件</span><br><span class="line">-d : 后面可以接欲修订的日期或者时间而不使用目前的时间，也可以是使用--date=&apos;日期/时间&apos;</span><br><span class="line">-m : 修改mtime</span><br><span class="line">-t :后面可以接欲修订的时间而不是目前时间，格式为[YYYYMMDDhhmm]</span><br><span class="line">最常用的情况是创建一个空文件/修改文件的mtime/atime</span><br></pre></td></tr></table></figure><h4 id="chattr-配置文件隐藏属性"><a href="#chattr-配置文件隐藏属性" class="headerlink" title="chattr(配置文件隐藏属性)"></a>chattr(配置文件隐藏属性)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">chattr [+-=][ASacdistu] 文件名/目录</span><br><span class="line"></span><br><span class="line">touch d.log</span><br><span class="line">charrt +i d.log</span><br><span class="line">rm d.log //删除不成功，提示Opreation not permitted</span><br><span class="line"></span><br><span class="line">chattr -i d.log</span><br><span class="line">rm d.log //删除成功</span><br></pre></td></tr></table></figure><h4 id="lsattr-显示文件隐藏属性"><a href="#lsattr-显示文件隐藏属性" class="headerlink" title="lsattr(显示文件隐藏属性)"></a>lsattr(显示文件隐藏属性)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lsattr [-adR] 文件/目录</span><br><span class="line">-a:将隐藏属性显示</span><br><span class="line">-d:如果是目录，仅显示目录本身的隐藏属性，不显示子目录的</span><br><span class="line">-R:如果是目录，则将子目录的隐藏属性也一并显示</span><br></pre></td></tr></table></figure><h4 id="文件的特殊权限-SUID-SGID-SBIT"><a href="#文件的特殊权限-SUID-SGID-SBIT" class="headerlink" title="文件的特殊权限(SUID,SGID,SBIT)"></a>文件的特殊权限(SUID,SGID,SBIT)</h4><h4 id="file-观察文件类型"><a href="#file-观察文件类型" class="headerlink" title="file(观察文件类型)"></a>file(观察文件类型)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file a.log</span><br></pre></td></tr></table></figure><h4 id="which-寻找-执行档"><a href="#which-寻找-执行档" class="headerlink" title="which(寻找[执行档])"></a>which(寻找[执行档])</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">which [-a] command</span><br><span class="line">-a:将所有PATH目录中可以找到的指令列出</span><br></pre></td></tr></table></figure><h4 id="whereis-由一些特定的目录中寻找文件-文件名"><a href="#whereis-由一些特定的目录中寻找文件-文件名" class="headerlink" title="whereis(由一些特定的目录中寻找文件/文件名)"></a>whereis(由一些特定的目录中寻找文件/文件名)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">whereis [-bmsu] 文件/目录名</span><br><span class="line">-b:只找binary格式的文件</span><br></pre></td></tr></table></figure><h4 id="ln"><a href="#ln" class="headerlink" title="ln"></a>ln</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ln [-sf] 来源文件 目标文件</span><br><span class="line">-s:如果不加任何参数就是hard link  -s就是symbolic link</span><br><span class="line">-f:如果目标文件存在就先删除在创建</span><br></pre></td></tr></table></figure><h4 id="type-检查是不是linux内部命令"><a href="#type-检查是不是linux内部命令" class="headerlink" title="type(检查是不是linux内部命令)"></a>type(检查是不是linux内部命令)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">type [-tpa] name</span><br><span class="line"></span><br><span class="line">type ls</span><br></pre></td></tr></table></figure><h4 id="env-观察环境变量以及常见环境变量说明"><a href="#env-观察环境变量以及常见环境变量说明" class="headerlink" title="env(观察环境变量以及常见环境变量说明)"></a>env(观察环境变量以及常见环境变量说明)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">env</span><br></pre></td></tr></table></figure><h4 id="set-观察所有变量与自定义变量"><a href="#set-观察所有变量与自定义变量" class="headerlink" title="set(观察所有变量与自定义变量)"></a>set(观察所有变量与自定义变量)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set</span><br></pre></td></tr></table></figure><h4 id="alias-设置别名"><a href="#alias-设置别名" class="headerlink" title="alias(设置别名)"></a>alias(设置别名)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alias lm=&apos;ls -al | more&apos;</span><br><span class="line">lm</span><br></pre></td></tr></table></figure><h4 id="unalias-取消别名"><a href="#unalias-取消别名" class="headerlink" title="unalias(取消别名)"></a>unalias(取消别名)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unalias lm</span><br></pre></td></tr></table></figure><h4 id="hsitory-历史记录"><a href="#hsitory-历史记录" class="headerlink" title="hsitory(历史记录)"></a>hsitory(历史记录)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">history [nacrw] histfiles</span><br></pre></td></tr></table></figure><h4 id="管线命令-pipe"><a href="#管线命令-pipe" class="headerlink" title="管线命令(pipe)"></a>管线命令(pipe)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -al /etc | less</span><br></pre></td></tr></table></figure><!--more-->]]></content>
    
    <summary type="html">
    
      &lt;p&gt;linux&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>练习原生sql</title>
    <link href="http://yoursite.com/2019/08/10/sql/"/>
    <id>http://yoursite.com/2019/08/10/sql/</id>
    <published>2019-08-10T04:26:55.000Z</published>
    <updated>2019-08-31T07:50:11.757Z</updated>
    
    <content type="html"><![CDATA[<p>做这个记录的主要原因是因为之前之前都是用ORM框架生成sql。然而现在在用原生sql的时候有点手生。</p><a id="more"></a><h3 id="order-by-DESC，ASC"><a href="#order-by-DESC，ASC" class="headerlink" title="order by(DESC，ASC)"></a>order by(DESC，ASC)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">prod_id,</span><br><span class="line">prod_name,</span><br><span class="line">prod_price</span><br><span class="line">FROM</span><br><span class="line">products</span><br><span class="line">ORDER BY</span><br><span class="line">prod_price,</span><br><span class="line">prod_name  //多个列进行排序时，时按照规定的顺序进行排序的，仅当多行具有相同的product_price，才会对prod_name进行排序</span><br></pre></td></tr></table></figure><h3 id="order-by-limit-查询某个列最大-最小的值"><a href="#order-by-limit-查询某个列最大-最小的值" class="headerlink" title="order by limit (查询某个列最大/最小的值)"></a>order by limit (查询某个列最大/最小的值)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">prod_id,</span><br><span class="line">prod_name,</span><br><span class="line">prod_price</span><br><span class="line">FROM</span><br><span class="line">products</span><br><span class="line">ORDER BY</span><br><span class="line">prod_price DESC </span><br><span class="line">LIMIT 1</span><br></pre></td></tr></table></figure><h3 id="where"><a href="#where" class="headerlink" title="where"></a>where</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">prod_id,</span><br><span class="line">prod_name,</span><br><span class="line">prod_price</span><br><span class="line">FROM</span><br><span class="line">products</span><br><span class="line">WHERE prod_price = 11.99</span><br></pre></td></tr></table></figure><h3 id="where子句操作符"><a href="#where子句操作符" class="headerlink" title="where子句操作符"></a>where子句操作符</h3><table><thead><tr><th>操作符</th><th>说明</th></tr></thead><tbody><tr><td>=</td><td>等于</td></tr><tr><td>&lt;&gt;</td><td>不等于</td></tr><tr><td>!=</td><td>不等于</td></tr><tr><td>&lt;</td><td>小于</td></tr><tr><td>&lt;=</td><td>小于等于</td></tr><tr><td>&gt;</td><td>大于</td></tr><tr><td>&gt;=</td><td>大于等于</td></tr><tr><td>between</td><td>两者之间</td></tr></tbody></table><h3 id="空值检查-is-null"><a href="#空值检查-is-null" class="headerlink" title="空值检查(is null)"></a>空值检查(is null)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">`name`,</span><br><span class="line">price</span><br><span class="line">FROM</span><br><span class="line">product</span><br><span class="line">WHERE</span><br><span class="line">delete_time IS NULL</span><br></pre></td></tr></table></figure><h3 id="AND操作符"><a href="#AND操作符" class="headerlink" title="AND操作符"></a>AND操作符</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">name,</span><br><span class="line">price,</span><br><span class="line">category_id</span><br><span class="line">FROM</span><br><span class="line">product</span><br><span class="line">WHERE</span><br><span class="line">category_id = 2</span><br><span class="line">AND price &lt;= 0.01</span><br></pre></td></tr></table></figure><h3 id="OR操作符"><a href="#OR操作符" class="headerlink" title="OR操作符"></a>OR操作符</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">name,</span><br><span class="line">price,</span><br><span class="line">category_id</span><br><span class="line">FROM</span><br><span class="line">product</span><br><span class="line">WHERE</span><br><span class="line">category_id = 2</span><br><span class="line">OR category_id =3 //如果and和or同时存在，and的优先级比or高，请使括号改变优先级</span><br></pre></td></tr></table></figure><h3 id="IN操作符"><a href="#IN操作符" class="headerlink" title="IN操作符"></a>IN操作符</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">name,</span><br><span class="line">price,</span><br><span class="line">category_id</span><br><span class="line">FROM</span><br><span class="line">product</span><br><span class="line">WHERE</span><br><span class="line">category_id IN(2,3,4)</span><br><span class="line">ORDER BY category_id DESC</span><br></pre></td></tr></table></figure><h3 id="NOT操作符"><a href="#NOT操作符" class="headerlink" title="NOT操作符"></a>NOT操作符</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">name,</span><br><span class="line">price,</span><br><span class="line">category_id</span><br><span class="line">FROM</span><br><span class="line">product</span><br><span class="line">WHERE</span><br><span class="line">category_id NOT IN(2,3,4)</span><br><span class="line">ORDER BY category_id DESC //MySQL中的NOT MySQL支持使用NOT对IN、BETWEEN和</span><br><span class="line">EXISTS子句取反</span><br></pre></td></tr></table></figure><h3 id="百分号（-）通配符"><a href="#百分号（-）通配符" class="headerlink" title="百分号（%）通配符"></a>百分号（%）通配符</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">name,</span><br><span class="line">price,</span><br><span class="line">category_id</span><br><span class="line">FROM</span><br><span class="line">product</span><br><span class="line">WHERE</span><br><span class="line">name LIKE &apos;小%&apos;  //&apos;%小&apos; &apos;%小%&apos;</span><br><span class="line">ORDER BY category_id DESC  //like语句不能匹配NULL</span><br></pre></td></tr></table></figure><h3 id="下划线（-）通配符-只能匹配单字符不能匹配多字符"><a href="#下划线（-）通配符-只能匹配单字符不能匹配多字符" class="headerlink" title="下划线（_）通配符 (只能匹配单字符不能匹配多字符)"></a>下划线（_）通配符 (只能匹配单字符不能匹配多字符)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="基本字符匹配"><a href="#基本字符匹配" class="headerlink" title="基本字符匹配"></a>基本字符匹配</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">name,</span><br><span class="line">price,</span><br><span class="line">category_id</span><br><span class="line">FROM</span><br><span class="line">product</span><br><span class="line">WHERE</span><br><span class="line">name REGEXP &apos;500&apos;</span><br><span class="line">ORDER BY category_id DESC</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//like和regexp的区别：</span><br><span class="line">like匹配整个列,如果被匹配的文本在列值中出现，like将不会找到他，也不会返回行（除非使用通配符）</span><br><span class="line">regexp在列值内进行匹配，如果被匹配的文本在列值中出现，REGEXP将会找到它，相应的行将被返回。</span><br></pre></td></tr></table></figure><h3 id="Concat-拼接"><a href="#Concat-拼接" class="headerlink" title="Concat() 拼接"></a>Concat() 拼接</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">CONCAT(</span><br><span class="line">&apos;(&apos;,</span><br><span class="line">vend_country,</span><br><span class="line">&apos;) &apos;,</span><br><span class="line">vend_city,</span><br><span class="line">vend_address</span><br><span class="line">) AS address</span><br><span class="line">FROM</span><br><span class="line">vendors</span><br></pre></td></tr></table></figure><h3 id="文本处理函数"><a href="#文本处理函数" class="headerlink" title="文本处理函数"></a>文本处理函数</h3><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>Upper()</td><td>文本大写</td></tr><tr><td>Lower()</td><td>文本小写</td></tr><tr><td>Left()</td><td>返回串左边的字符</td></tr><tr><td>Right()</td><td>返回串右边的字符</td></tr><tr><td>Length()</td><td>返回串的长度</td></tr><tr><td>Locate（）</td><td>找出串的一个字串</td></tr><tr><td>LTrim()</td><td>去掉左边的空格</td></tr><tr><td>RTrim()</td><td>去掉右边的空格</td></tr><tr><td>SubString()</td><td>返回子串的字符</td></tr></tbody></table><h3 id="作为计算字段使用子查询"><a href="#作为计算字段使用子查询" class="headerlink" title="作为计算字段使用子查询"></a>作为计算字段使用子查询</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> SELECT</span><br><span class="line">cust_name,</span><br><span class="line">cust_state,</span><br><span class="line">(</span><br><span class="line">SELECT</span><br><span class="line">count(*)</span><br><span class="line">FROM</span><br><span class="line">orders</span><br><span class="line">WHERE</span><br><span class="line">orders.cust_id = customers.cust_id</span><br><span class="line">) AS order_usm</span><br><span class="line">FROM</span><br><span class="line">customers</span><br><span class="line"></span><br><span class="line">1.从customers表中检索客户列表。</span><br><span class="line">2.对于检索出的每个客户，统计其在orders表中的订单数目。</span><br></pre></td></tr></table></figure><h3 id="笛卡尔积"><a href="#笛卡尔积" class="headerlink" title="笛卡尔积"></a>笛卡尔积</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">vend_name,</span><br><span class="line">prod_name,</span><br><span class="line">prod_price</span><br><span class="line">FROM</span><br><span class="line">vendors,</span><br><span class="line">products</span><br><span class="line">ORDER BY</span><br><span class="line">vend_name,</span><br><span class="line">prod_name</span><br></pre></td></tr></table></figure><h3 id="INNER-JOIN"><a href="#INNER-JOIN" class="headerlink" title="INNER JOIN"></a>INNER JOIN</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">vend_name,</span><br><span class="line">prod_name,</span><br><span class="line">prod_price</span><br><span class="line">FROM</span><br><span class="line">vendors</span><br><span class="line">INNER JOIN products ON vendors.vend_id = products.vend_id</span><br></pre></td></tr></table></figure><h3 id="UNION"><a href="#UNION" class="headerlink" title="UNION"></a>UNION</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">vend_id,</span><br><span class="line">prod_id,</span><br><span class="line">prod_price</span><br><span class="line">FROM</span><br><span class="line">products</span><br><span class="line">WHERE</span><br><span class="line">prod_price &lt; 10</span><br><span class="line">UNION</span><br><span class="line">SELECT</span><br><span class="line">vend_id,</span><br><span class="line">prod_id,</span><br><span class="line">prod_price</span><br><span class="line">FROM</span><br><span class="line">products</span><br><span class="line">WHERE</span><br><span class="line">vend_id IN (1001, 1003)</span><br></pre></td></tr></table></figure><h3 id="插入完整的行"><a href="#插入完整的行" class="headerlink" title="插入完整的行"></a>插入完整的行</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO orders</span><br><span class="line">VALUES</span><br><span class="line">(300000, NOW(), 1000000003)</span><br><span class="line"></span><br><span class="line">INSERT INTO orders (</span><br><span class="line">order_num,</span><br><span class="line">order_date,</span><br><span class="line">cust_id</span><br><span class="line">)</span><br><span class="line">VALUES</span><br><span class="line">(300001, NOW(), 1000000003)</span><br><span class="line"></span><br><span class="line">插入多行</span><br><span class="line">INSERT INTO orders (</span><br><span class="line">order_num,</span><br><span class="line">order_date,</span><br><span class="line">cust_id</span><br><span class="line">)</span><br><span class="line">VALUES</span><br><span class="line">(300002, NOW(), 1000000003),</span><br><span class="line">(300003, NOW(), 1000000003)</span><br></pre></td></tr></table></figure><h3 id="UPDATE"><a href="#UPDATE" class="headerlink" title="UPDATE"></a>UPDATE</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">UPDATE orders</span><br><span class="line">SET order_date = NOW()</span><br><span class="line">WHERE</span><br><span class="line">cust_id = 1000000003</span><br></pre></td></tr></table></figure><h3 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DELETE</span><br><span class="line">FROM</span><br><span class="line">orders</span><br><span class="line">WHERE</span><br><span class="line">orders.order_num = 300003</span><br></pre></td></tr></table></figure><h3 id="mysql索引"><a href="#mysql索引" class="headerlink" title="mysql索引"></a>mysql索引</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">单值索引：一个索引只包含一个列，一个表可以有多个单值索引</span><br><span class="line">唯一索引：索引列的值必须唯一，但允许有空值</span><br><span class="line">复合索引：一个索引包含多个列(</span><br><span class="line">CREATE INDEX indexname on table(columnnane(length))</span><br><span class="line">ALTER table add INDEX[indexname] on (columnname(length))</span><br><span class="line">DROP INDEX [indexname] on table </span><br><span class="line">SHOW INDEX FROM table </span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="什么时候建立索引"><a href="#什么时候建立索引" class="headerlink" title="什么时候建立索引"></a>什么时候建立索引</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1 唯一主键</span><br><span class="line">2 频繁作为查询条件的字段</span><br><span class="line">3 查询中作为外键的字段</span><br><span class="line">4 频繁更新的字段不适合创建索引</span><br><span class="line">5 where条件中用不到的不创建</span><br><span class="line">6 查询中排序的字段</span><br><span class="line">7 查询中统计/分组的字段</span><br></pre></td></tr></table></figure><h3 id="EXPLAIN"><a href="#EXPLAIN" class="headerlink" title="EXPLAIN"></a>EXPLAIN</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN SELECT * from table</span><br></pre></td></tr></table></figure><table><thead><tr><th>字段</th><th>描述</th></tr></thead><tbody><tr><td>id</td><td>表示执行操作表的数据 id相同，执行从上而下 ;id不同 如果是子查询，id越大，优先级越高</td></tr><tr><td>select_type</td><td>查询类型 SIMPLE、 PRIMARY(最外层标记)、 SUBQUERY(子查询)、 DERIVED() 、UNION(第二个select出现在union后则标记为union,若union出现在from的子查询中则标记为derived)、 UNION RESULT(union结果的标记)</td></tr><tr><td>table</td><td>查询表的名字</td></tr><tr><td>type</td><td>访问类型排列 好-&gt;差 system(表只有一行的时候)-&gt;const(表示一次索引就找到)-&gt;eq_ref(唯一索引扫描)-&gt;ref(非唯一性索引，返回某列的所有值)-&gt;range(范围索引)-&gt;index(索引)-&gt;all</td></tr><tr><td>possible_keys</td><td>显示可能用在该表上的索引 一个/多个，不一定被使用</td></tr><tr><td>key</td><td>实际使用的索引，如果是null，则没有使用索引，查询中如果使用了覆盖索引，则该索引仅出现在key列表中</td></tr><tr><td>key_len</td><td>索引字段显示的最大长度，并非实际使用长度，在不失精度的情况下，越短越好</td></tr><tr><td>ref</td><td>索引的哪一个列被使用了</td></tr><tr><td>rows</td><td>根据表统计信息yi’ji索引使用情况，大致估算找到所需记录需要读取的行数</td></tr><tr><td>extra</td><td>其他的额外信息 using filesort 文件排序 using tempoarary using index 表示使用了覆盖索引 using where 表示使用了where过滤 using join buffer 使用了连接缓存 impossible where  where子句的值总是false 并不能用来获取任何元组</td></tr></tbody></table><!--more-->]]></content>
    
    <summary type="html">
    
      &lt;p&gt;做这个记录的主要原因是因为之前之前都是用ORM框架生成sql。然而现在在用原生sql的时候有点手生。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>使用xunsearch实现简单分词</title>
    <link href="http://yoursite.com/2019/05/08/xunsearch/"/>
    <id>http://yoursite.com/2019/05/08/xunsearch/</id>
    <published>2019-05-08T08:55:32.000Z</published>
    <updated>2019-05-08T09:09:27.749Z</updated>
    
    <content type="html"><![CDATA[<p>安装<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ wget http://www.xunsearch.com/download/xunsearch-full-latest.tar.bz2</span><br><span class="line">$ tar -xjf xunsearch-full-latest.tar.bz2</span><br><span class="line">$ <span class="built_in">cd</span> xunsearch-full-1.3.0/</span><br><span class="line">$ sh setup.sh</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>启动<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> 安装目录 ; bin/./xs-ctl.sh start</span><br></pre></td></tr></table></figure></p><p>重启启动<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> 安装目录 ; bin/./xs-ctl.sh restart</span><br></pre></td></tr></table></figure></p><p>停止<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./安装目录/bin/xs-ctl.sh faststop</span><br></pre></td></tr></table></figure></p><p>卸载<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rm -rf 安装目录</span><br></pre></td></tr></table></figure></p><p>生成实例搜索代码<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ util/SearchSkel.php -p 搜索项目名称（例如：demo）</span><br></pre></td></tr></table></figure></p><p>通过mysql存入数据<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ php Indexer.php --rebuild --<span class="built_in">source</span>=mysql://账号:密码@mysqlIP地址/数据库 --sql=<span class="string">"sql语句"</span> --project=搜索项目名称（例如：demo）</span><br></pre></td></tr></table></figure></p><p><a href="http://www.xunsearch.com/doc/php/guide/start.installation" target="_blank" rel="noopener">传送门</a></p><!--more-->]]></content>
    
    <summary type="html">
    
      &lt;p&gt;安装&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ wget http://www.xunsearch.com/download/xunsearch-full-latest.tar.bz2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ tar -xjf xunsearch-full-latest.tar.bz2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ &lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; xunsearch-full-1.3.0/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sh setup.sh&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>记录一个mysql拒连的问题</title>
    <link href="http://yoursite.com/2019/04/29/mysql/"/>
    <id>http://yoursite.com/2019/04/29/mysql/</id>
    <published>2019-04-29T10:03:19.000Z</published>
    <updated>2019-04-30T03:31:52.031Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">update user set host = &apos;%&apos; where user = &apos;root&apos; and host=&apos;localhost&apos;;</span><br><span class="line"></span><br><span class="line">授权</span><br><span class="line">GRANT ALL privileges ON *.* TO &apos;username&apos;@&apos;%&apos; identified by &apos;password&apos;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>node同步阻塞和异步IO模式</title>
    <link href="http://yoursite.com/2019/03/23/node/"/>
    <id>http://yoursite.com/2019/03/23/node/</id>
    <published>2019-03-23T02:25:23.000Z</published>
    <updated>2019-03-31T04:30:49.565Z</updated>
    
    <content type="html"><![CDATA[<h3 id="同步模式"><a href="#同步模式" class="headerlink" title="同步模式"></a>同步模式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var fs = require(&quot;fs&quot;);</span><br><span class="line"></span><br><span class="line">var data = fs.readFileSync(&apos;demo.txt&apos;);</span><br><span class="line"></span><br><span class="line">console.log(data.toString());</span><br><span class="line"></span><br><span class="line">console.log(&quot;end&quot;);</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">123321</span><br><span class="line">end</span><br></pre></td></tr></table></figure><h3 id="异步IO模式"><a href="#异步IO模式" class="headerlink" title="异步IO模式"></a>异步IO模式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">let fs = require(&apos;fs&apos;)</span><br><span class="line"></span><br><span class="line">fs.readFile(&apos;demo.txt&apos;,(err,data)=&gt;&#123;</span><br><span class="line"></span><br><span class="line">if(err) return console.error(err)</span><br><span class="line"></span><br><span class="line">console.log(data.toString())</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">console.log(&apos;end&apos;)</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">end</span><br><span class="line">123321</span><br></pre></td></tr></table></figure><p>阻塞模式要等到读取完数据后才执行完程序</p><p>非阻塞模式不需要等待文件读取完，这样就可以在读取文件时同时执行接下来的代码，大大提高了程序的性能</p><p>阻塞是按顺序执行的，而非阻塞是不需要按顺序的</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;同步模式&quot;&gt;&lt;a href=&quot;#同步模式&quot; class=&quot;headerlink&quot; title=&quot;同步模式&quot;&gt;&lt;/a&gt;同步模式&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>PHP获取汉字的首字母</title>
    <link href="http://yoursite.com/2019/03/20/php/"/>
    <id>http://yoursite.com/2019/03/20/php/</id>
    <published>2019-03-20T00:56:25.000Z</published>
    <updated>2019-03-20T00:57:39.386Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 获取单个汉字拼音首字母。</span><br><span class="line"> */</span><br><span class="line">function getFirstChar($character)&#123;</span><br><span class="line">    $fchar = ord($character&#123;0&#125;);</span><br><span class="line">    if($fchar &gt;= ord(&quot;A&quot;) and $fchar &lt;= ord(&quot;z&quot;) ) &#123;</span><br><span class="line">        return strtoupper($character&#123;0&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    $s1 = iconv(&quot;UTF-8&quot;,&quot;gb2312&quot;,$character);</span><br><span class="line">    $s2 = iconv(&quot;gb2312&quot;,&quot;UTF-8&quot;,$s1);</span><br><span class="line">    if($s2==$character)&#123;</span><br><span class="line">        $s=$s1;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        $s=$character;</span><br><span class="line">    &#125;</span><br><span class="line">    $asc = ord($s&#123;0&#125;) * 256 + ord($s&#123;1&#125;) - 65536;</span><br><span class="line">    if($asc &gt;= -20319 &amp;&amp; $asc &lt;= -20284) return &quot;A&quot;;</span><br><span class="line">    if($asc &gt;= -20283 &amp;&amp; $asc &lt;= -19776) return &quot;B&quot;;</span><br><span class="line">    if($asc &gt;= -19775 &amp;&amp; $asc &lt;= -19219) return &quot;C&quot;;</span><br><span class="line">    if($asc &gt;= -19218 &amp;&amp; $asc &lt;= -18711) return &quot;D&quot;;</span><br><span class="line">    if($asc &gt;= -18710 &amp;&amp; $asc &lt;= -18527) return &quot;E&quot;;</span><br><span class="line">    if($asc &gt;= -18526 &amp;&amp; $asc &lt;= -18240) return &quot;F&quot;;</span><br><span class="line">    if($asc &gt;= -18239 &amp;&amp; $asc &lt;= -17923) return &quot;G&quot;;</span><br><span class="line">    if($asc &gt;= -17922 &amp;&amp; $asc &lt;= -17418) return &quot;H&quot;;</span><br><span class="line">    if($asc &gt;= -17922 &amp;&amp; $asc &lt;= -17418) return &quot;I&quot;;</span><br><span class="line">    if($asc &gt;= -17417 &amp;&amp; $asc &lt;= -16475) return &quot;J&quot;;</span><br><span class="line">    if($asc &gt;= -16474 &amp;&amp; $asc &lt;= -16213) return &quot;K&quot;;</span><br><span class="line">    if($asc &gt;= -16212 &amp;&amp; $asc &lt;= -15641) return &quot;L&quot;;</span><br><span class="line">    if($asc &gt;= -15640 &amp;&amp; $asc &lt;= -15166) return &quot;M&quot;;</span><br><span class="line">    if($asc &gt;= -15165 &amp;&amp; $asc &lt;= -14923) return &quot;N&quot;;</span><br><span class="line">    if($asc &gt;= -14922 &amp;&amp; $asc &lt;= -14915) return &quot;O&quot;;</span><br><span class="line">    if($asc &gt;= -14914 &amp;&amp; $asc &lt;= -14631) return &quot;P&quot;;</span><br><span class="line">    if($asc &gt;= -14630 &amp;&amp; $asc &lt;= -14150) return &quot;Q&quot;;</span><br><span class="line">    if($asc &gt;= -14149 &amp;&amp; $asc &lt;= -14091) return &quot;R&quot;;</span><br><span class="line">    if($asc &gt;= -14090 &amp;&amp; $asc &lt;= -13319) return &quot;S&quot;;</span><br><span class="line">    if($asc &gt;= -13318 &amp;&amp; $asc &lt;= -12839) return &quot;T&quot;;</span><br><span class="line">    if($asc &gt;= -12838 &amp;&amp; $asc &lt;= -12557) return &quot;W&quot;;</span><br><span class="line">    if($asc &gt;= -12556 &amp;&amp; $asc &lt;= -11848) return &quot;X&quot;;</span><br><span class="line">    if($asc &gt;= -11847 &amp;&amp; $asc &lt;= -11056) return &quot;Y&quot;;</span><br><span class="line">    if($asc &gt;= -11055 &amp;&amp; $asc &lt;= -10247) return &quot;Z&quot;;</span><br><span class="line">    return NULL;</span><br><span class="line">    //return $character ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">echo getFirstChar(&quot;我的&quot;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Linux下查看系统版本号信息的方法</title>
    <link href="http://yoursite.com/2019/03/05/linux/"/>
    <id>http://yoursite.com/2019/03/05/linux/</id>
    <published>2019-03-05T08:40:40.000Z</published>
    <updated>2019-03-05T09:00:00.929Z</updated>
    
    <content type="html"><![CDATA[<h3 id="查看Linux内核版本命令"><a href="#查看Linux内核版本命令" class="headerlink" title="查看Linux内核版本命令"></a>查看Linux内核版本命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat /proc/version</span><br><span class="line">uname -a</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;查看Linux内核版本命令&quot;&gt;&lt;a href=&quot;#查看Linux内核版本命令&quot; class=&quot;headerlink&quot; title=&quot;查看Linux内核版本命令&quot;&gt;&lt;/a&gt;查看Linux内核版本命令&lt;/h3&gt;&lt;figure class=&quot;highlight plai
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>最近下班在做的事情</title>
    <link href="http://yoursite.com/2018/11/16/todo/"/>
    <id>http://yoursite.com/2018/11/16/todo/</id>
    <published>2018-11-16T11:11:50.000Z</published>
    <updated>2018-12-03T02:43:50.069Z</updated>
    
    <content type="html"><![CDATA[<h3 id="学习vue"><a href="#学习vue" class="headerlink" title="学习vue"></a>学习vue</h3><p>通读了一下vue的文档</p><a id="more"></a><h3 id="将之前的小程序改成vue"><a href="#将之前的小程序改成vue" class="headerlink" title="将之前的小程序改成vue"></a>将之前的小程序改成vue</h3><p>在改vue的过程中遇到的问题<br><strong>1.跨域问题解决办法： </strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">proxyTable: &#123;</span><br><span class="line"> &apos;/api&apos;: &#123;</span><br><span class="line">   target: &apos;http://bl.7yue.pro/v1/&apos;,</span><br><span class="line">   changeOrigin: true, //可否跨域</span><br><span class="line">   pathRewrite: &#123;</span><br><span class="line">     &apos;^/api&apos;: &apos;&apos;</span><br><span class="line">   &#125;,</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p><strong>2.引入本地图片 </strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import likeSrc from &apos;./images/like.png&apos;</span><br></pre></td></tr></table></figure></p><p><strong>3.vue异步加载数据子组件数据不是最新的</strong><br>方式1：<a href="https://segmentfault.com/q/1010000009036850" target="_blank" rel="noopener">传送门</a><br>方式2：通过<code>wathc</code>侦听器监听数据的改变<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">watch:&#123;</span><br><span class="line">       count:function(val)&#123;</span><br><span class="line">           this.selfCount = val</span><br><span class="line">       &#125;,</span><br><span class="line">       like:function(val)&#123;</span><br><span class="line">           this.selfLike = val</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;,</span><br></pre></td></tr></table></figure></p><p><strong>4.vue带参数跳转页面</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div  v-for=&quot;(item,key) of books&quot; :key=&quot;key&quot; &gt;</span><br><span class="line">                   &lt;router-link :to=&quot;&#123; name: &apos;BookDetail&apos;, params: &#123; id: item.id &#125;&#125;&quot;&gt;</span><br><span class="line">                       &lt;cmp-book  v-if=&quot;item&quot; :book=&quot;item&quot; &gt;&lt;/cmp-book&gt;</span><br><span class="line">                   &lt;/router-link&gt;</span><br><span class="line">               &lt;/div&gt;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mounted() &#123;</span><br><span class="line">       this.id = this.$route.params.id</span><br><span class="line">       console.log(this.id)</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><!--more-->]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;学习vue&quot;&gt;&lt;a href=&quot;#学习vue&quot; class=&quot;headerlink&quot; title=&quot;学习vue&quot;&gt;&lt;/a&gt;学习vue&lt;/h3&gt;&lt;p&gt;通读了一下vue的文档&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>学习Vue</title>
    <link href="http://yoursite.com/2018/10/25/vue/"/>
    <id>http://yoursite.com/2018/10/25/vue/</id>
    <published>2018-10-25T09:24:23.000Z</published>
    <updated>2018-10-29T06:39:56.351Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2018/10/25/vue/lifecycle.png" alt=""><br><a id="more"></a></p><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><ol><li>生命周期就是vue实例在某一个时间点自动执行的函数</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;Vue的生命周期钩子&lt;/title&gt;</span><br><span class="line">&lt;script src=&quot;./js/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">var vm = new Vue(&#123;</span><br><span class="line">el:&apos;#app&apos;,</span><br><span class="line">data:&#123;</span><br><span class="line">msg:&quot;hello world&quot;</span><br><span class="line">&#125;,</span><br><span class="line">template:&quot;&lt;div&gt;&#123;&#123;msg&#125;&#125;&lt;/div&gt;&quot;,</span><br><span class="line">beforeCreate:function () &#123;</span><br><span class="line">console.log(&apos;before create&apos;);</span><br><span class="line">&#125;,</span><br><span class="line">created:function()&#123;</span><br><span class="line">console.log(&apos;created&apos;);</span><br><span class="line">&#125;,</span><br><span class="line">beforeMount:function()&#123;</span><br><span class="line">console.log(this.$el);</span><br><span class="line">console.log(&apos;beforeMount&apos;);</span><br><span class="line">&#125;,</span><br><span class="line">mounted:function()&#123;</span><br><span class="line">console.log(this.$el);</span><br><span class="line">console.log(&apos;mounted&apos;);</span><br><span class="line">&#125;,</span><br><span class="line">beforeDestroy:function()&#123;</span><br><span class="line">console.log(&apos;beforeDestroy&apos;);</span><br><span class="line">&#125;,</span><br><span class="line">destroyed:function()&#123;</span><br><span class="line">console.log(&apos;destroyed&apos;);</span><br><span class="line">&#125;,</span><br><span class="line">beforeUpdate:function()&#123;</span><br><span class="line">console.log(&apos;beforeUpdate&apos;);</span><br><span class="line">&#125;,</span><br><span class="line">updated:function()&#123;</span><br><span class="line">console.log(&apos;updated&apos;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>在执行生命后期钩子函数的时候会发现<code>beforeDestroy</code> <code>destroyed</code>并未执行。 原因是我们需要在此之前调用<code>vm.$destory();</code><br><code>beforeUpdate</code> <code>updated</code>执行的前提是<code>data</code>中的数据发生改变的时候。因此我们需要用改变<code>msg</code>的值，<code>vm.$data.msg = &#39;hello&#39;</code>就可以看到函数执行<br><!--more--></p><h3 id="Vue中ref的使用"><a href="#Vue中ref的使用" class="headerlink" title="Vue中ref的使用"></a>Vue中ref的使用</h3><p>如果我们在使用<code>Vue</code>的时候获取<code>dom</code>中的内容的时候，应该怎么办呢？<br>请看下面的这段代码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;ref&lt;/title&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;./js/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line"> &lt;div ref=&quot;hello&quot; @click=&quot;handleCliclk&quot;&gt;</span><br><span class="line"> hello world</span><br><span class="line"> &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">var vm = new Vue(&#123;</span><br><span class="line">el:&quot;#app&quot;,</span><br><span class="line">methods:&#123;</span><br><span class="line">handleCliclk:function()&#123;</span><br><span class="line">console.log(this.$refs.hello.innerHTML)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>在点击<code>hello world</code>的时候，需要打印出hello world，我们就可以使用 <code>ref</code>.<br>在组件中使用<code>ref</code>,请看下面<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">&lt;counter ref=&quot;one&quot; @change=&quot;handleChange&quot;&gt;&lt;/counter&gt;</span><br><span class="line">&lt;counter ref=&quot;two&quot; @change=&quot;handleChange &quot;&gt;&lt;/counter&gt;</span><br><span class="line">&lt;div&gt;&#123;&#123;total&#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">Vue.component(&quot;counter&quot;,&#123;</span><br><span class="line">template:&quot;&lt;div @click=&apos;handleClick&apos;&gt;&#123;&#123;number&#125;&#125;&lt;/div&gt;&quot;,</span><br><span class="line">data:function()&#123;</span><br><span class="line">return &#123;</span><br><span class="line">number:0</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">methods:&#123;</span><br><span class="line">handleClick:function()&#123;</span><br><span class="line">this.number++;</span><br><span class="line">this.$emit(&quot;change&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">var vm = new Vue(&#123;</span><br><span class="line">el:&quot;#app&quot;,</span><br><span class="line">data:&#123;</span><br><span class="line">total:0</span><br><span class="line">&#125;,</span><br><span class="line">methods:&#123;</span><br><span class="line">handleChange:function()&#123;</span><br><span class="line">let one = this.$refs.one.number;</span><br><span class="line">let two = this.$refs.two.number;</span><br><span class="line">this.total = one + two;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2018/10/25/vue/lifecycle.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Chorme自带原生截图</title>
    <link href="http://yoursite.com/2018/10/23/screenshot/"/>
    <id>http://yoursite.com/2018/10/23/screenshot/</id>
    <published>2018-10-23T01:30:36.000Z</published>
    <updated>2018-10-23T01:51:16.670Z</updated>
    
    <content type="html"><![CDATA[<h3 id="可视范围截图"><a href="#可视范围截图" class="headerlink" title="可视范围截图"></a>可视范围截图</h3><p>1.<code>Ctrl + Shift + I</code>调出控制台。<br>2.<code>Ctrl + Shift +　P</code>调出命令菜单<br>3.输入<code>Capture screenshot</code>回车</p><h3 id="全页面截图"><a href="#全页面截图" class="headerlink" title="全页面截图"></a>全页面截图</h3><p>1.<code>Ctrl + Shift + I</code>调出控制台。<br>2.<code>Ctrl + Shift +　P</code>调出命令菜单<br>3.输入<code>Capture full size screenshot</code>回车</p><p><a href="https://developers.google.com/web/updates/2017/08/devtools-release-notes" target="_blank" rel="noopener">参考资料</a>（ps:科学上网）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;可视范围截图&quot;&gt;&lt;a href=&quot;#可视范围截图&quot; class=&quot;headerlink&quot; title=&quot;可视范围截图&quot;&gt;&lt;/a&gt;可视范围截图&lt;/h3&gt;&lt;p&gt;1.&lt;code&gt;Ctrl + Shift + I&lt;/code&gt;调出控制台。&lt;br&gt;2.&lt;code&gt;Ctrl 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>记录最近喜欢的一句话</title>
    <link href="http://yoursite.com/2018/10/11/Sentence/"/>
    <id>http://yoursite.com/2018/10/11/Sentence/</id>
    <published>2018-10-11T03:43:28.000Z</published>
    <updated>2018-10-11T05:41:43.588Z</updated>
    
    <content type="html"><![CDATA[<p>心上无垢，林间有风。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;心上无垢，林间有风。&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>小程序</title>
    <link href="http://yoursite.com/2018/09/19/mina/"/>
    <id>http://yoursite.com/2018/09/19/mina/</id>
    <published>2018-09-19T01:34:44.000Z</published>
    <updated>2018-09-19T07:45:41.425Z</updated>
    
    <content type="html"><![CDATA[<h3 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h3><p><img src="/2018/09/19/mina/mina.png" alt="小程序"></p><h3 id="弹性盒子"><a href="#弹性盒子" class="headerlink" title="弹性盒子"></a>弹性盒子</h3><p>对于弹性盒子，我们需要知道<code>flex container</code>和<code>flex item</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;view class=&apos;container&apos;&gt;</span><br><span class="line">  &lt;view class=&apos;chunk color1&apos;&gt;1&lt;/view&gt;</span><br><span class="line"></span><br><span class="line">  &lt;view class=&apos;chunk color2&apos;&gt;2&lt;/view&gt;</span><br><span class="line"></span><br><span class="line">  &lt;view class=&apos;chunk color3&apos;&gt;3&lt;/view&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line">.container&#123;</span><br><span class="line">  display: flex;</span><br><span class="line">&#125;</span><br><span class="line">.chunk&#123;</span><br><span class="line">  </span><br><span class="line">  width: 100px;</span><br><span class="line">  height: 100px;</span><br><span class="line">&#125;</span><br><span class="line">.color1&#123;</span><br><span class="line">  background-color: #123321;</span><br><span class="line">&#125;</span><br><span class="line">.color2&#123;</span><br><span class="line">  background-color: #321312;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.color3&#123;</span><br><span class="line">  background-color: #876543;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>正如上面代码所示，我们将最外层的<code>view</code>的样式设置为<code>display:flex</code>时，可以消除块状特性。<br>如果要在一个弹性盒子中指定元素为纵向排列，我们只需要指定<code>flex-direction: column;</code>。</p><p>现在如果我们有这样一个需求，我们需要将这三个色块颠倒，只需要指定<code>flex-direction: row-reverse/column-reverse;</code></p><font color="#FF0000" face="黑体">对于<code>reverse</code>来说高度是自适应的，宽度100%。并且在使用<code>reverse</code>之后不仅仅是元素顺序改变，对齐方式也会改变。</font><p>如果要设置对齐方式怎么办呢。<code>justify-content: center、space-between/around、flex-end/start;</code>就起到了重要的作用<br><strong>2主轴和交叉轴</strong><br>    如何确定谁是主轴,谁是交叉轴。取决于<code>flex-direction</code>。<font color="#FF0000" face="黑体"><code>justify-content</code>指的是主轴方向的排布，<code>align-item</code>指的是交叉轴上的排布</font></p><p>###组件###</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;基本结构&quot;&gt;&lt;a href=&quot;#基本结构&quot; class=&quot;headerlink&quot; title=&quot;基本结构&quot;&gt;&lt;/a&gt;基本结构&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/2018/09/19/mina/mina.png&quot; alt=&quot;小程序&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;弹性
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>箭头函数</title>
    <link href="http://yoursite.com/2018/08/30/arrow-function/"/>
    <id>http://yoursite.com/2018/08/30/arrow-function/</id>
    <published>2018-08-30T02:14:06.000Z</published>
    <updated>2018-08-30T02:35:23.688Z</updated>
    
    <content type="html"><![CDATA[<p>使用注意点：</p><p><font color="#FF0000" face="黑体">1.函数体内的this对象，就是定义时所在的对象，而不是使用时所在的对象。</font><br>2.不可以做构造函数，也就是说，不可以用<code>new</code>，否则会抛出一个错误。<br>3.不可以使用<code>arguments</code>对象，该对象在函数体内不存在。如果要使用，可以用<code>Rest</code>参数代替。<br>4.不可以用<code>yield</code>,因此箭头函数不能用做<code>Gennrate</code>函数<br><a id="more"></a></p><p><font color="#FF0000" face="黑体">请注意第一点，<code>this</code>对象是可变的，但是在箭头函数中是固定的</font><br>举个栗子：<br>普通函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    var f =function()&#123;</span><br><span class="line">        this.a =&apos;a&apos;,</span><br><span class="line">        this.b =&apos;b&apos;,</span><br><span class="line">        this.c =&#123;</span><br><span class="line">            a:&apos;a+&apos;,</span><br><span class="line">            b:function()&#123;</span><br><span class="line">                return this.a</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    console.log(new f().c.b()) // a+</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>箭头函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    var f = function()&#123;</span><br><span class="line">        this.a = &apos;a&apos;,</span><br><span class="line">        this.b = &apos;b&apos;,</span><br><span class="line">        this.c = &#123;</span><br><span class="line">            a:&apos;a+&apos;,</span><br><span class="line">            b:()=&gt;&#123;</span><br><span class="line">                return this.a</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    console.log(new f().c.b())  //a</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在看一个栗子<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    function foo()&#123;</span><br><span class="line">        setTimeout(() =&gt; &#123;</span><br><span class="line">            console.log(&apos;id:&apos;,this.id)</span><br><span class="line">        &#125;, 100);</span><br><span class="line">    &#125;</span><br><span class="line">    var id =21</span><br><span class="line">    foo.call(&#123;id:42&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这个输出的是42的原因是：箭头函数的定义生效时在<code>foo</code>函数生成时，而真正执行的是时候是在100ms之后，如果是普通函数，这个<code>this</code>的指向是<code>window</code>,此时输出21。但是<font color="#FF0000" face="黑体">箭头函数导致<code>this</code>总是指向函数定义生效是所在的对象</font>所以输出42。 </p><!--more-->]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用注意点：&lt;/p&gt;
&lt;p&gt;&lt;font color=&quot;#FF0000&quot; face=&quot;黑体&quot;&gt;1.函数体内的this对象，就是定义时所在的对象，而不是使用时所在的对象。&lt;/font&gt;&lt;br&gt;2.不可以做构造函数，也就是说，不可以用&lt;code&gt;new&lt;/code&gt;，否则会抛出一个错误。&lt;br&gt;3.不可以使用&lt;code&gt;arguments&lt;/code&gt;对象，该对象在函数体内不存在。如果要使用，可以用&lt;code&gt;Rest&lt;/code&gt;参数代替。&lt;br&gt;4.不可以用&lt;code&gt;yield&lt;/code&gt;,因此箭头函数不能用做&lt;code&gt;Gennrate&lt;/code&gt;函数&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>javaScript中this</title>
    <link href="http://yoursite.com/2018/08/22/js-this/"/>
    <id>http://yoursite.com/2018/08/22/js-this/</id>
    <published>2018-08-22T01:22:04.000Z</published>
    <updated>2018-08-22T01:55:20.035Z</updated>
    
    <content type="html"><![CDATA[<p>总结一下this，之前一直都是蛮懵逼的。this这个玩意是什么呢，在面向对象语言中，比如PHP中this代表的是某个的对象。而在NB的js中这玩意玄乎的不要不要的。稍微不注意就会挂在这里，其实只要弄明白函数的几种调用场景就能很清晰地理解this了。下面一一来搞定。<br><a id="more"></a></p><h3 id="用作函数调用"><a href="#用作函数调用" class="headerlink" title="用作函数调用"></a>用作函数调用</h3><p>这种形式是在js中调用最为广泛的一种形式。比如这段函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function sayWords()&#123;</span><br><span class="line">    alert(this.words);</span><br><span class="line">&#125;</span><br><span class="line">sayWords();</span><br></pre></td></tr></table></figure></p><p>当我们运行<code>sayWord()</code>的时候会发什么呢？很显然，会显示出一个没有找到words这个属性的错误提示。好了，我们改一下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var words = &apos;hello javascript&apos;</span><br><span class="line">function sayWords()&#123;</span><br><span class="line">    alert(this.words);</span><br><span class="line">&#125;</span><br><span class="line">sayWords();</span><br></pre></td></tr></table></figure></p><p>这个时候我们知道了，<font color="#FF0000" face="黑体">当用作函数调用的时候，函数体里的this指的是window这个对象</font></p><p>事情到这里还没有结束，看看那下面这段代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function sayWords()&#123;</span><br><span class="line">    alert(this.words);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var Student = &#123;</span><br><span class="line">    words:&quot;hello world&quot;,</span><br><span class="line">    sayWords:function()&#123;</span><br><span class="line">        sayWords();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Student.sayWords();</span><br></pre></td></tr></table></figure><p>当运行<code>Student.sayWords()</code>的时候会发生什么，会alert出<code>hello world</code>?运行时话发现找不到这个属性。报错了。<br>解决办法一：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function sayWords()&#123;</span><br><span class="line">    alert(this.words);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var Student = &#123;</span><br><span class="line">    words:&quot;hello world&quot;,</span><br><span class="line">    sayWords:function()&#123;</span><br><span class="line">        sayWords.apply(this); //注意这里，也可以用sayWords.call(this)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Student.sayWords();</span><br></pre></td></tr></table></figure><p>在上面的代码中，我们使用了sayWords.apply(this)，当然我们使用sayWords.call(this)也可以达到相同的效果，在这里，我们强制将sayWords中this改变为Student对象了，这样就能正确的hello world了:0<br>还可以这样<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">function sayWords()&#123;</span><br><span class="line">    alert(this.words);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var Student = &#123;</span><br><span class="line">    words:&quot;hello world&quot;,</span><br><span class="line">    sayWords:function()&#123;</span><br><span class="line">        var sayWords2 = sayWords.bind(this); //注意这里，也可以用sayWords.call(this)</span><br><span class="line">        sayWords2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Student.sayWords();</span><br></pre></td></tr></table></figure></p><p>上面的sayWords2 = sayWords.bind(this);这里用了ES5的bind方法，<font color="#FF0000" face="黑体">该方法会创建一个函数的实例，其this值会通被绑定到传给bind()函数的值 </font><br>第二种：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">var Student = &#123;</span><br><span class="line">    words:&quot;hello world&quot;,</span><br><span class="line">    sayWords:function()&#123;</span><br><span class="line">        var that = this;</span><br><span class="line"></span><br><span class="line">        function sayWords()&#123;</span><br><span class="line">            alert(that.words);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        sayWords();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Student.sayWords();</span><br></pre></td></tr></table></figure></p><p>这种解法应该是很普遍的吧，先把this赋值给另外一个变量，按照习惯，我们一般将这个变量叫做that或者self。这样我们再tath.words的时候就肯定是对的。</p><h3 id="作为对象的方法"><a href="#作为对象的方法" class="headerlink" title="作为对象的方法"></a>作为对象的方法</h3><p>这种形式应该是用的最多最广的吧。比如说下面这种代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">ar Student = &#123;</span><br><span class="line">    name:&quot;Edward&quot;,</span><br><span class="line">    age:18,</span><br><span class="line">    showName:function()&#123;</span><br><span class="line">        alert(this.name);</span><br><span class="line">    &#125;,</span><br><span class="line">    showAge:function()&#123;</span><br><span class="line">       alert(this.age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Student.showName(); // Edward</span><br><span class="line">Student.showAge();  // 18</span><br></pre></td></tr></table></figure></p><p>这里面Student.showName和Student.showAge中this指向的就是Student这个对象，相应的this.name就是Stduent.name了。</p><h3 id="用作构造函数"><a href="#用作构造函数" class="headerlink" title="用作构造函数"></a>用作构造函数</h3><p>我们应该常常用这种方法来进行类的实现，尤其是对象的创建的时候，比如:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function Student()&#123;</span><br><span class="line">    this.name = &quot;Edward&quot;;</span><br><span class="line">    this.age  = 18;</span><br><span class="line">    this.sayName = function()&#123;</span><br><span class="line">        alert(this.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var student = new Student();</span><br><span class="line">student.name = &quot;Julia Gan&quot;;</span><br><span class="line">this.sayName();</span><br></pre></td></tr></table></figure></p><p>运行后会alert出”Julia Gan”的字符串，所以在这里，this在这里指向的是student这个对象</p><h3 id="用作apply和call的方法"><a href="#用作apply和call的方法" class="headerlink" title="用作apply和call的方法"></a>用作apply和call的方法</h3><p>参考上面，函数的this所指的就是apply/call中传进来的this对象了<br><!--more--></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;总结一下this，之前一直都是蛮懵逼的。this这个玩意是什么呢，在面向对象语言中，比如PHP中this代表的是某个的对象。而在NB的js中这玩意玄乎的不要不要的。稍微不注意就会挂在这里，其实只要弄明白函数的几种调用场景就能很清晰地理解this了。下面一一来搞定。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>鬼畜</title>
    <link href="http://yoursite.com/2018/08/16/101/"/>
    <id>http://yoursite.com/2018/08/16/101/</id>
    <published>2018-08-16T10:32:33.000Z</published>
    <updated>2018-09-08T05:31:08.308Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2018/08/16/101/101.jpg" alt=""><br><a id="more"></a></p><p>祝贺杨超越同学成功入驻鬼畜全明星以及燃烧我的卡路里血洗B站鬼畜区，太TM魔性了。<a href="https://www.bilibili.com/video/av28809991" target="_blank" rel="noopener">哔哩哔哩 (゜-゜)つロ 干杯~-bilibili</a><br><!--more--></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2018/08/16/101/101.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>妈妈再也不怕我斗图斗不过了</title>
    <link href="http://yoursite.com/2018/08/15/emoji/"/>
    <id>http://yoursite.com/2018/08/15/emoji/</id>
    <published>2018-08-15T01:20:37.000Z</published>
    <updated>2018-08-15T01:24:11.423Z</updated>
    
    <content type="html"><![CDATA[<p><strong><em>流量党慎入！！！</em></strong><br><strong><em>流量党慎入！！！</em></strong><br><strong><em>流量党慎入！！！</em></strong><br><a href="http://www.bee-ji.com" target="_blank" rel="noopener">斗图集散地</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;em&gt;流量党慎入！！！&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;&lt;em&gt;流量党慎入！！！&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;&lt;em&gt;流量党慎入！！！&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;&lt;a href=&quot;http://www.bee
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Flask核心对象</title>
    <link href="http://yoursite.com/2018/08/09/core/"/>
    <id>http://yoursite.com/2018/08/09/core/</id>
    <published>2018-08-09T10:48:39.000Z</published>
    <updated>2018-09-08T05:33:29.433Z</updated>
    
    <content type="html"><![CDATA[<hr><p>应用上下文 <code>Flask</code><br>请求上下文 <code>Request</code><br><a id="more"></a><br><code>Flask</code>的核心对象是在<code>AppContext</code>中<br><code>Request</code>是在<code>RequestContext</code>中<br>这两个上下文都是实现了<code>push()</code>,<code>pop()</code>,<code>__enter__()</code>,<code>__exit__()</code>。<br>我画了个图，方便自己理解这个玩意。<br><img src="/2018/08/09/core/context.png" alt="core"></p><h3 id="核心对象"><a href="#核心对象" class="headerlink" title="核心对象"></a>核心对象</h3><p><strong> 1.</strong>当一个请求进入Flask框架后，Flask会实例化一个<code>RequestContext</code>,这个请求上下文封装了这次请求相关信息，这个信息就保存在<code>Request</code>中。接着Flask会吧这个<code>Appcontext</code>推入到栈中,Flask中用<code>localStack</code>来表示一个栈，<code>localstack</code>是一个对象，需要实例化。Flask中用<code>_request_ctx_stack</code>来表示。同理<code>AppContext</code>也是这样的过程，用<code>_app_ctx_stack</code>表示。<br><strong> 2.</strong>当一个请求进入的时候，Flask会把<code>Requset</code>通过<code>push()</code>推入到栈中。<br>那么<code>AppContext</code>是怎么入栈。<code>Requesr</code>在入栈之前会去检查<code>_app_ctx_stack</code>的栈顶元素，如果当前栈顶是空或者不是当前对象，Flask会推<code>AppContext</code>到<code>_app_ctx_stack</code>中，然后才会将<code>RequestContext</code>推入<code>_request_ctx_stack</code>中，请求结束后，两个栈中的内容会执行<code>pop()</code>弹出<br><strong> 3.</strong><code>current_app</code>,<code>request</code>是指向的<code>_app_ctx_stack</code>,<code>_request_ctx_stack</code>的栈顶元素，如果栈中是有值的，是不会出现<code>localproxy unband</code>的情况。<br>我们看一下这个<code>test.py</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">from flask import Flask</span><br><span class="line">app = flask(__name__)</span><br><span class="line">a  = current_app</span><br></pre></td></tr></table></figure></p><p>在调试模式下，我们会看到<code>localproxy unband</code>,原因是<code>_app_ctx_stack</code>为空。<br>解决办法一<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from flask import Flask</span><br><span class="line">app = flask(__name__)</span><br><span class="line">ctx = app.app_context()</span><br><span class="line">ctx.push()</span><br><span class="line">a  = current_app</span><br><span class="line">ctx.pop()</span><br></pre></td></tr></table></figure></p><p>解决办法二<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from flask import Flask</span><br><span class="line">app = flask(__name__)</span><br><span class="line">with app.app_context():</span><br><span class="line">a  = current_app</span><br></pre></td></tr></table></figure></p><h3 id="with"><a href="#with" class="headerlink" title="with"></a>with</h3><p><code>with</code>实现的原理：实现<code>__enter__()</code>,<code>__exit__()</code><br><code>with</code>用处：<br>    实现了上下文管理协议的对象使用with，称为上下文管理器<br>    怎么实现一个上下文管理器。实现<code>__enter__()</code>,<code>__exit__()</code>即可<br>    上下文表达式必须要返回一个上下文管理器<br>关于<code>as</code>,看一下这段代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class A:</span><br><span class="line">def __enter__(self):</span><br><span class="line">a = 1</span><br><span class="line">def __exit__(self,exc_type,exc_vlaue,tb):</span><br><span class="line">b = 2</span><br><span class="line">with A() as obj：</span><br><span class="line">pass</span><br></pre></td></tr></table></figure></p><p><code>obj</code>并不是所认为的上下文管理器，在调试模式下，可以看到<code>obj:None</code>,在<code>__enter__()</code>中增加<code>return a</code>,再次进入调试模式，可以看到<code>obj:1</code><br>在看一个具体的代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">class MyResource:</span><br><span class="line">def __enter__(self):</span><br><span class="line">print(&apos;connect to resource&apos;)</span><br><span class="line">return self</span><br><span class="line">def __exit__(self,exc_type,exc_value,tb):</span><br><span class="line">print(&apos;close to resource&apos;)</span><br><span class="line">def query(self):</span><br><span class="line">print(&apos;query data&apos;)</span><br><span class="line">with MyResource() as resource:</span><br><span class="line">resource.query()</span><br></pre></td></tr></table></figure></p><p><code>__exit__()</code>主要是用来回收资源的，<code>exc_type ,exc_value, tb</code>这三个参数是用来处理异常的，调试模式下，我们可以这三个参数的值是<code>None</code>。<br>我们修改一下这段代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">with MyResource() as resource:</span><br><span class="line">1/0</span><br><span class="line">resource.query()</span><br></pre></td></tr></table></figure></p><p>在调试模式下，<code>exc_type, exc_value, tb</code>这三个参数是有值的，然后就可以在<code>__exit__</code>中处理异常，<br>此外<code>__exit__()</code>需要返回<code>True</code>或者<code>False</code>,<code>True</code>表示外部不需要再处理异常，<code>False</code>表示在外部还需要处理异常。在<code>__exit__()</code>中什么都不返回，调用结果是<code>None</code>，在Python中<code>None</code>也是<code>False</code>。<br><!--more--></p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;应用上下文 &lt;code&gt;Flask&lt;/code&gt;&lt;br&gt;请求上下文 &lt;code&gt;Request&lt;/code&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>thinkphp5.1</title>
    <link href="http://yoursite.com/2018/08/09/thinkphp5/"/>
    <id>http://yoursite.com/2018/08/09/thinkphp5/</id>
    <published>2018-08-09T10:30:23.000Z</published>
    <updated>2018-08-09T10:32:19.903Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p>thinkphp5.1试水。<br><!--more--></p><h3 id="独立验证"><a href="#独立验证" class="headerlink" title="独立验证"></a>独立验证</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public function getBanner($id)&#123;</span><br><span class="line"></span><br><span class="line">       $validate = Validate::make([</span><br><span class="line">           &apos;name&apos;=&gt;&apos;require|max:10&apos;,</span><br><span class="line">           &apos;email&apos;=&gt;&apos;email&apos;</span><br><span class="line"></span><br><span class="line">       ]);</span><br><span class="line">       $data = [</span><br><span class="line">           &apos;name&apos;=&gt;&apos;vendervender&apos;,</span><br><span class="line">           &apos;email&apos;=&gt;&apos;venderqq.com&apos;</span><br><span class="line">       ];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       $result = $validate-&gt;batch()-&gt;check($data);</span><br><span class="line">       dump($validate-&gt;getError());</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;thinkphp5.1试水。&lt;br&gt;&lt;!--more--&gt;&lt;/p&gt;
&lt;h3 id=&quot;独立验证&quot;&gt;&lt;a href=&quot;#独立验证&quot; class=&quot;headerlink&quot; title=&quot;独立验证&quot;&gt;&lt;/a&gt;独立验证&lt;/h3&gt;&lt;figure cl
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>回归</title>
    <link href="http://yoursite.com/2018/08/07/LOL/"/>
    <id>http://yoursite.com/2018/08/07/LOL/</id>
    <published>2018-08-07T01:03:23.000Z</published>
    <updated>2018-09-08T05:34:38.582Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2018/08/07/LOL/anivia.jpg" alt="anivia"><br>2017年8月7号上午，<a href="https://panda.tv/15403" target="_blank" rel="noopener">熊猫花小乐</a>回归联盟。祝好，BB乐。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/2018/08/07/LOL/anivia.jpg&quot; alt=&quot;anivia&quot;&gt;&lt;br&gt;2017年8月7号上午，&lt;a href=&quot;https://panda.tv/15403&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;熊猫花小乐&lt;
      
    
    </summary>
    
    
  </entry>
  
</feed>
